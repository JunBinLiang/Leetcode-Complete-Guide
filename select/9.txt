1. 普通莫队 https://xiekeyi98.com/f2a41e6f.html


一串数列，一大堆询问，询问一个区间的不同的数的个数。如a{1,3,2,5,2,3,2}区间[2,4]有3个不同的数。询问次数与数列大小≤100000。

朴素算法及对一个区间暴力遍历，维护基数数组cnt[]，O(n2)。


#include<bits/stdc++.h>
using namespace std ;
const int maxn = 300000 + 100 ;
const int maxm = 1000000 + 10 ;
int a[maxn];
int cnt[maxm];
int ans = 0 ; 
int BLOCK = 0 ;
 
inline void add( int pos ) 
{
    cnt[ a[pos] ]++;
    if( cnt[ a[pos] ] == 1 )
        ans++;
}
 
inline void remov( int pos )
{
    cnt[ a[pos] ]--;
    if( cnt[ a[pos] ] == 0 )
        ans--;
}
 
struct QUERY
{
    int l , r , num ;
}Q[maxn];
 
int ANS[maxn];
inline bool cmp( const QUERY &a , const QUERY &b )
{
    if( a.l / BLOCK != b.l / BLOCK )
        return a.l / BLOCK < b.l / BLOCK ;
    else
        return a.r < b.r ;
}
 
int main()
{
    int n ;
    cin >> n ;
    for( int i = 1 ; i <= n ; i++)
        scanf("%d",&a[i]);
    int q;
    scanf("%d",&q);
 
    for( int i = 1 ; i <= q ; i++)
    {
        int l , r ;
        scanf("%d%d",&l,&r);
        Q[i].l = l , Q[i].r = r , Q[i].num = i ;
    }
    BLOCK = sqrt(n);
    sort( Q + 1 , Q + 1 + q , cmp ) ;
    int l = 0  , r = 0 ; 
    for( int i = 1 ; i <= q ; i++)
    {
        int ll = Q[i].l  , rr = Q[i].r;
        while( l < ll )
            remov(l++);
        while( l > ll )
            add(--l);
        while( r < rr )
            add(++r);
        while( r > rr )
            remov(r--);
        ANS[Q[i].num] = ans ; 
    }
 
    for( int i = 1 ; i <= q ; i++)
        printf("%d\n",ANS[i]);
    return 0 ;
}



2. 修改莫队  https://www.cnblogs.com/mjtcn/p/8590492.html

#include<cstdio>
#include<algorithm>
#include<cmath>

using namespace std;

const int N = 100100;

struct Query{
    int l,r,id,t,k;
    //依次表示 查询的左端点，右端点，查询序号，查询前的最近一次修改，左端点属于的块
}q[N];
struct Change{
    int p,x,y;
    //依次表示 修改的位置，修改后的值，修改前的值（原值）
}c[N];
int last[N],ans[N],cnt[1000100],v[N];
int C,D,Ans,L,R,T,n,m;
char s[10];

bool cmp(Query a,Query b) {
    if (a.k != b.k) return a.k < b.k;
    if (a.r != b.r) return a.r < b.r;
    return a.t < b.t;
}
void add(int x) {
    cnt[x] ++;
    if (cnt[x] == 1) Ans ++;
}
void del(int x) {
    cnt[x] --;
    if (cnt[x] == 0) Ans --;
}
void update(int p,int x) { // 将p位置修改为x
    if (L <= p && p <= R) del(v[p]),add(x);
    v[p] = x;
}
void work() {
    L = 1,R = 0,T = 0;
    for (int i=1; i<=C; ++i) {
        while (T < q[i].t) update(c[T+1].p,c[T+1].x),T++;
        while (T > q[i].t) update(c[T].p,c[T].y),T--;

        while (L < q[i].l) del(v[L]),L++;
        while (L > q[i].l) L--,add(v[L]);
        while (R < q[i].r) R++,add(v[R]);
        while (R > q[i].r) del(v[R]),R--;

        ans[q[i].id] = Ans;
    }
}
int main() {
    scanf("%d%d",&n,&m);
    int B = pow(double(n),2.0/3.0);
    for (int i=1; i<=n; ++i)
        scanf("%d",&v[i]),last[i] = v[i];
    for (int a,b,i=1; i<=m; ++i) {
        scanf("%s%d%d",s,&a,&b);
        if (s[0]=='Q') {
            q[++C].l = a;q[C].r = b;q[C].t = D;q[C].k = (n-1)/B+1;q[C].id = C;
        }
        else {
            c[++D].p = a;c[D].x = b;c[D].y = last[a];last[a] = b;
        }
    }
    sort(q+1,q+C+1,cmp);
    work();
    for (int i=1; i<=C; ++i)
        printf("%d\n",ans[i]);
    return 0;
}
 

