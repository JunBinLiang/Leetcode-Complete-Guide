class Solution {
    int INF=100000;
    int dir[][]=new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    
    public int guardCastle(String[] grid) {
        char A[][]=to(grid);
        int N=A.length*A[0].length;

        List<Edge>[] graph = MaxFlowDinic.createGraph(4*N+10);
        int source=N*4+1;
        int dest=N*4+2;
        int special=N*4+3;

        for(int i=0;i<A.length;i++){
            for(int j=0;j<A[0].length;j++){
                if(A[i][j]=='#')continue;
                int id1=i*A[0].length+j;
                int id2=id1+N;
                //connect itself
                if(A[i][j]=='.'){
                     MaxFlowDinic.addEdge(graph,id1,id2,1);
                }
                else{
                    MaxFlowDinic.addEdge(graph,id1,id2,INF);
                }



                if(A[i][j]=='S'){
                    MaxFlowDinic.addEdge(graph,id2,dest,INF);
                   
                }
                else if(A[i][j]=='C'){
                    MaxFlowDinic.addEdge(graph,source,id1,INF);
                }
                else if(A[i][j]=='P'){
                    MaxFlowDinic.addEdge(graph,id2,special,INF);
                    MaxFlowDinic.addEdge(graph,special,id1,INF);
                }
            
                for(int p[]:dir){
                    int x=i+p[0];
                    int y=j+p[1];
                    if(x<0||x>=A.length||y<0||y>=A[0].length)continue;
                    int id3=x*A[0].length+y;
                    MaxFlowDinic.addEdge(graph,id2,id3,INF);
                }
            }
        }

        //run maxFlow
        int flow = MaxFlowDinic.maxFlow(graph,source,dest);
        if(flow>N)return -1;
        return flow;
    }

    public char[][] to(String grid[]){
        char A[][]=new char[grid.length][grid[0].length()];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length();j++){
                A[i][j]=grid[i].charAt(j);
            }
        }
        return A;
    }
}

class Edge {
    int t, rev, cap, f;

    public Edge(int t, int rev, int cap) {
      this.t = t;
      this.rev = rev;
      this.cap = cap;
    }
}

class MaxFlowDinic {
  public static List<Edge>[] createGraph(int nodes) {
    List<Edge>[] graph = new List[nodes];
    for (int i = 0; i < nodes; i++)
      graph[i] = new ArrayList<>();
    return graph;
  }

  public static void addEdge(List<Edge>[] graph, int s, int t, int cap) {
    graph[s].add(new Edge(t, graph[t].size(), cap));
    graph[t].add(new Edge(s, graph[s].size() - 1, 0));
  }

  static boolean dinicBfs(List<Edge>[] graph, int src, int dest, int[] dist) {
    Arrays.fill(dist, -1);
    dist[src] = 0;
    int[] Q = new int[graph.length];
    int sizeQ = 0;
    Q[sizeQ++] = src;
    for (int i = 0; i < sizeQ; i++) {
      int u = Q[i];
      for (Edge e : graph[u]) {
        if (dist[e.t] < 0 && e.f < e.cap) {
          dist[e.t] = dist[u] + 1;
          Q[sizeQ++] = e.t;
        }
      }
    }
    return dist[dest] >= 0;
  }

  static int dinicDfs(List<Edge>[] graph, int[] ptr, int[] dist, int dest, int u, int f) {
    if (u == dest)
      return f;
    for (; ptr[u] < graph[u].size(); ++ptr[u]) {
      Edge e = graph[u].get(ptr[u]);
      if (dist[e.t] == dist[u] + 1 && e.f < e.cap) {
        int df = dinicDfs(graph, ptr, dist, dest, e.t, Math.min(f, e.cap - e.f));
        if (df > 0) {
          e.f += df;
          graph[e.t].get(e.rev).f -= df;
          return df;
        }
      }
    }
    return 0;
  }

  public static int maxFlow(List<Edge>[] graph, int src, int dest) {
    int flow = 0;
    int[] dist = new int[graph.length];
    while (dinicBfs(graph, src, dest, dist)) {
      int[] ptr = new int[graph.length];
      while (true) {
        int df = dinicDfs(graph, ptr, dist, dest, src, Integer.MAX_VALUE);
        if (df == 0)
          break;
        flow += df;
      }
    }
    return flow;
  }

  /*public static void main(String[] args) {
    List<Edge>[] graph = createGraph(3);
    addEdge(graph, 0, 1, 3);
    addEdge(graph, 0, 2, 2);
    addEdge(graph, 1, 2, 2);
    System.out.println(4 == maxFlow(graph, 0, 2));
  }*/
}
