思路：
1. k sum 思路
2. 用背包解，用bit 去记录有多少种方法可以达到取这个数（什么k） （更快的思路） o(n*sum)


代码：

class Solution {
    public boolean splitArraySameAverage(int[] A) {
        int sum=0;
        for(int i:A)sum+=i;
        double ave=(sum+0.0)/A.length;
        Map<Integer,Integer>map=new HashMap<>();
        int dp[][]=new int[A.length+1][sum+1];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        
        for(int k=1;k<=A.length/2;k++){
            int T=(int)(ave*k);
            if(ave*k-T>0.0001)continue;
            map.put(T,k);
            
        }
        
        dp[0][0]=0;
        for(int r=1;r<dp.length;r++){
            int val=A[r-1];
            dp[r][0]=0;
            
            for(int c=1;c<dp[0].length;c++){
                dp[r][c]=dp[r-1][c];
                if(c<val)continue;
                if(dp[r-1][c-val]==-1)continue;
                
                int bit=dp[r-1][c-val];
                if(bit==0){
                    if(dp[r][c]!=-1)dp[r][c]=dp[r][c]|(1);
                    else dp[r][c]=1;
                }else{
                    if(dp[r][c]==-1)dp[r][c]=0;
                    dp[r][c]=dp[r][c]|(dp[r-1][c-val]<<1);
                }

                if(map.containsKey(c)){
                    int k=map.get(c);
                    if(dp[r][c]!=-1&&(dp[r][c]&(1<<(k-1)))!=0){
                        return true;
                    }
                }

            }
        }
        return false;
    }
}
