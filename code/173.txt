/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    vector<TreeNode*>A;
    BSTIterator(TreeNode* root) {
        if(root!=NULL){
            while(root!=NULL){
                A.push_back(root);
                TreeNode* left=root->left;
                root->left=NULL;
                root=left;
            }
        }
    }
    
    /** @return the next smallest number */
    int next() {
        TreeNode *top=A[A.size()-1];
        A.pop_back();
        int res=top->val;
        
        if(top->right!=NULL){
            TreeNode* right=top->right;
            while(right!=NULL){
                A.push_back(right);
                TreeNode* left=right->left;
                right->left=NULL;
                right=left;
            }
        }
        
        return res;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return A.size()>0;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
