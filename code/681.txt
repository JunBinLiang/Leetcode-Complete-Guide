Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

Example 1:

Input: "19:34"
Output: "19:39"
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.
Example 2:

Input: "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.











class Solution {
    int total=0;
    List<Integer>digits=new ArrayList<>();
    int min=Integer.MAX_VALUE;
    String res="";
    public String nextClosestTime(String time) {
        String A[]=time.split(":");
        int h=Integer.parseInt(A[0]);
        int m=Integer.parseInt(A[1]);
        total=h*60+m;
        for(int i=0;i<time.length();i++){
            char c=time.charAt(i);
            if(c==':')continue;
            int d=c-'0';
            digits.add(d);
        }
        dfs(new ArrayList<>());
        return res;
    }
    
    public void dfs(List<Integer> cur){
        if(cur.size()==4){
            int h=cur.get(0)*10+cur.get(1);
            if(h>=24)return;
            int m=cur.get(2)*10+cur.get(3);
            if(m>=60)return;
            int sum=h*60+m;
            
            if(sum-total>0){
                if(sum-total<min){
                    min=Math.abs(sum-total);
                    res=cur.get(0)+""+cur.get(1)+":"+cur.get(2)+cur.get(3);
                }
            }
            else if(sum-total<=0){
                sum+=24*60;
                if(sum-total<min){
                    min=Math.abs(sum-total);
                    res=cur.get(0)+""+cur.get(1)+":"+cur.get(2)+cur.get(3);
                }
            }
            
            
            
            return;
        }
        
        
        for(int d:digits){
            cur.add(d);
            dfs(cur);
            cur.remove(cur.size()-1);
        }
    }
}
