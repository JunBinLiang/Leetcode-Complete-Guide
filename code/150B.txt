思路
1. 我们要找两个没有相交的subset， 分别是u 的adjecent 和v 的adjecent
2. 他们要满足 h 和t 的数量


// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*; 
// Please name your class Main
public class Main {
	
	static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    
 
    static int read() throws IOException {
        in.nextToken();
        return (int) in.nval;
    }
    static String readString() throws IOException {
        in.nextToken();
        return in.sval;
	}
	
	
	public static void main (String[] args) throws java.lang.Exception {
	    Scanner in = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		//InputReader in = new InputReader(System.in);
		
		
		int n=in.nextInt();
		int m=in.nextInt();
		int h=in.nextInt();
		int t=in.nextInt();
		
		List<Integer>adjecent[]=new ArrayList[n];
		List<int[]>pairs=new ArrayList<>();
		for(int i=0;i<adjecent.length;i++){
			adjecent[i]=new ArrayList<>();
		}
		
		for(int i=0;i<m;i++){
			int v1=in.nextInt()-1;
			int v2=in.nextInt()-1;
			adjecent[v1].add(v2);
			adjecent[v2].add(v1);
			pairs.add(new int[]{v1,v2});
		}
		
		
		Solution sol=new Solution();
		sol.solution(adjecent,h,t,pairs,out);
		out.flush();	
		
		
		
		
		
		
		
		
		//for(int t=0;t<T;t++){
		//int C,L;
		/*while((N = read()) != 0){
			M=read();
			if(N==0&&M==0)break;
			
			List<Integer>adjecent[]=new ArrayList[N];
			for(int i=0;i<N;i++){
				//if(adjecent[i]!=null)adjecent[i].celar();
				 adjecent[i]=new ArrayList<Integer>();
			}
			
			for(int i=0;i<M;i++){
				int v1=read();int v2=read();
				adjecent[v1].add(v2);
				adjecent[v2].add(v1);
			}
			
			Solution s=new Solution();
			s.solution(adjecent,out);
		}*/
		
		/*int A[][]=new int[4][4];
		for(int i=0;i<4;i++){
			String s=in.next();
			for(int j=0;j<s.length();j++){
				if(s.charAt(j)=='b'){
					A[i][j]=0;
				}else{
					A[i][j]=1;
				}
			}
		}*/
		
				
				//out.flush();
		
		}
 
}
 
class Solution{
	//constant variable
	final int MAX=Integer.MAX_VALUE;
	final int MIN=Integer.MIN_VALUE;
	Set<Integer>adjecent[];
	//////////////////////////////
 

 

	public void solution(List<Integer>adjecent[],int h,int t,List<int[]>edges,PrintWriter out){

		Collections.sort(edges,(a,b)->{
			return adjecent[b[0]].size()-adjecent[a[0]].size();
		});
		
		//u : degree  h
		//v : degree  t
		//1+h+t edges need
		int n=adjecent.length;
		List<Integer>uset=new ArrayList<>();
		List<Integer>vset=new ArrayList<>();
		int visit[]=new int[n];
		int u=-1,v=-1;
		
		for(int pair[]:edges){
			if(u!=-1)break;
			int v1=pair[0];
			int v2=pair[1];
			int out1=adjecent[v1].size();
			int out2=adjecent[v2].size();
			if(out1<h+1)break;
			if(out1<h+1||out2<t+1){ 
				continue;
			}
			List<Integer>child1=adjecent[v1];
			List<Integer>child2=adjecent[v2];
			
			List<Integer>ulist=new ArrayList<>();
			List<Integer>vlist=new ArrayList<>();
			//u is always satisfy
			
			for(Integer c:child1){
				if(c==v2)continue;
				visit[c]++;
				ulist.add(c);
				if(ulist.size()==h)break;
			}
			
			for(Integer c:child2){
				if(c==v1||visit[c]==1){
					if(c==v1)continue;
					visit[c]++;
					continue;
				}
				vlist.add(c);
				visit[c]++;
				if(vlist.size()==t)break;
			}
			
			if(vlist.size()==t){
				u=v1;
				v=v2;
				uset=ulist;
				vset=vlist;
			}else{
				for(Integer c:ulist){
					if(visit[c]==2){
						visit[c]++;
						vlist.add(c);
					}
					if(vlist.size()==t)break;
				}
				
				
				
				for(int i:ulist){
					if(visit[i]==3)continue;
					visit[i]=0;
				}
				ulist=new ArrayList<>();
				for(Integer c:child1){
					if(c==v2)continue;
					if(visit[c]!=0)continue;
					ulist.add(c);
					if(ulist.size()==h)break;
				}
				if(ulist.size()==h){
					u=v1;
					v=v2;
					uset=ulist;
					vset=vlist;
				}
			}
			
			//clean
			for(int i:vlist)visit[i]=0;
			for(int i:ulist)visit[i]=0;
		}
		
		
		
		for(int pair[]:edges){
			if(u!=-1)break;
			int v2=pair[0];
			int v1=pair[1];
			int out1=adjecent[v1].size();
			int out2=adjecent[v2].size();
			if(out2<t+1)break;
			if(out1<h+1||out2<t+1){ 
				continue;
			}
			List<Integer>child1=adjecent[v1];
			List<Integer>child2=adjecent[v2];
			
			List<Integer>ulist=new ArrayList<>();
			List<Integer>vlist=new ArrayList<>();
			//u is always satisfy
			
			for(Integer c:child1){
				if(c==v2)continue;
				visit[c]++;
				ulist.add(c);
				if(ulist.size()==h)break;
			}
			
			for(Integer c:child2){
				if(c==v1||visit[c]==1){
					if(c==v1)continue;
					visit[c]++;
					continue;
				}
				vlist.add(c);
				visit[c]++;
				if(vlist.size()==t)break;
			}
			
			if(vlist.size()==t){
				u=v1;
				v=v2;
				uset=ulist;
				vset=vlist;
			}else{
				for(Integer c:ulist){
					if(visit[c]==2){
						visit[c]++;
						vlist.add(c);
					}
					if(vlist.size()==t)break;
				}
				
				
				
				for(int i:ulist){
					if(visit[i]==3)continue;
					visit[i]=0;
				}
				ulist=new ArrayList<>();
				for(Integer c:child1){
					if(c==v2)continue;
					if(visit[c]!=0)continue;
					ulist.add(c);
					if(ulist.size()==h)break;
				}
				if(ulist.size()==h){
					u=v1;
					v=v2;
					uset=ulist;
					vset=vlist;
				}
			}
			
			//clean
			for(int i:vlist)visit[i]=0;
			for(int i:ulist)visit[i]=0;
		}
		
		
		
		if(u==-1){
			out.println("NO");
			return;
		}
		
		
		
		//found
		out.println("YES");
		u++;v++;
		out.println(u+" "+v);
		for(Integer i:uset){
			out.print((i+1)+" ");
		}
		out.println("");
		for(Integer i:vset){
			out.print((i+1)+" ");
		}
		out.println("");
		
	}
	

 
	
	
 
 
	
	
	
 
 
	/*public void tarjan(int p,int r){
		if(cut)return;
		List<Integer>childs=adjecent[r];
		dis[r]=low[r]=time;
		time++;
		
		//core for tarjan
		int son=0;
		for(int c:childs){
			if(ban==c||c==p)continue;
			if(dis[c]==-1){
				son++;
				tarjan(r,c);
				low[r]=Math.min(low[r],low[c]);
				if((r==root&&son>1)||(low[c]>=dis[r]&&r!=root)){
					cut=true;
					return;
				}
			}else{
				if(c!=p){
					low[r]=Math.min(low[r],dis[c]);
				}
			}
		}
		
	}*/
	
	
 
	
	
		
	
	//helper function I would use
	public void ascii(String s){
		for(char c:s.toCharArray()){
			System.out.print((c-'a')+" ");
		}
		msg("");
	}
	
	public int flip(int i){
		if(i==0)return 1;
		else return 0;
	}
	
	public boolean[] primes(int n){
		boolean A[]=new boolean[n+1];
		for(int i=2;i<=n;i++){
			if(A[i]==false){
				for(int j=i+i;j<=n;j+=i){
					A[j]=true;
				}
			}
		}
		return A;
	}
	
	public void msg(String s){
		System.out.println(s);
	}
	
	public int[] kmpPre(String p){
		int pre[]=new int[p.length()];
		int l=0,r=1;
		while(r<p.length()){
			if(p.charAt(l)==p.charAt(r)){
				pre[r]=l+1;
				l++;r++;
			}else{
				if(l==0)r++;
				else l=pre[l-1];
			}
		}
		return pre;
	}
	
	public boolean isP(String s){
		int l=0,r=s.length()-1;
		while(l<r){
			if(s.charAt(l)!=s.charAt(r))return false;
			l++;r--;
		}
		return true;
	}
	
	public int find(int nums[],int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
	
	public boolean check(int grid[][],int r,int c){
		if(r<0||c<0||r>=grid.length||c>=grid[0].length)return false;
		return true;
	}
	
	public int get(int A[],int i){
		if(i<0||i>=A.length)return 0;
		return A[i];
	}
	public int[] copy1(int A[]){
		int a[]=new int[A.length];
		for(int i=0;i<a.length;i++)a[i]=A[i];
		return a;
	}
	
	public int[] copy2(int A[]){
		int a[]=new int[A.length];
		for(int i=0;i<a.length;i++)a[i]=A[i];
		return a;
	}
	
	
	public void print1(int A[]){
		for(long i:A)System.out.print(i+" ");
		System.out.println();
	}
	public void print2(int A[][]){
		for(int i=0;i<A.length;i++){
			for(int j=0;j<A[0].length;j++){
				System.out.print(A[i][j]+" ");
			}System.out.println();
		}
	}
	
	public int min(int a,int b){
		return Math.min(a,b);
	}
	
	
	public int[][] matrixdp(int[][] grid) {
        if(grid.length==0)return new int[][]{};
        int res[][]=new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                res[i][j]=grid[i][j]+get(res,i-1,j)+get(res,i,j-1)-get(res,i-1,j-1);
            }
        }
        return res;
    }
    
    public int get(int grid[][],int i,int j){
        if(i<0||j<0||i>=grid.length||j>=grid[0].length)return 0;
        return grid[i][j];
    }
	
	public int[] suffixArray(String s){
		int n=s.length();
		Suffix A[]=new Suffix[n];
		
		for(int i=0;i<n;i++){
			A[i]=new Suffix(i,s.charAt(i)-'a',0);
		}
		
		for(int i=0;i<n;i++){
			if(i==n-1){
				A[i].next=-1;
			}else{
				A[i].next=A[i+1].rank;
			}
		}
		Arrays.sort(A);
		
		for(int len=4;len<A.length*2;len<<=1){
			int in[]=new int[A.length];
			int rank=0;
			int pre=A[0].rank;
			A[0].rank=rank;
			in[A[0].index]=0;
			for(int i=1;i<A.length;i++){//rank for the first two letter
				if(A[i].rank==pre&&A[i].next==A[i-1].next){
					pre=A[i].rank;
					A[i].rank=rank;
				}else{
					pre=A[i].rank;
					A[i].rank=++rank;
				}
				in[A[i].index]=i;
			}
			
			for(int i=0;i<A.length;i++){
				int next=A[i].index+len/2;
				if(next>=A.length){
					A[i].next=-1;
				}else{
					A[i].next=A[in[next]].rank;
				}
			}
			
			
			Arrays.sort(A);
		}
		
		
		int su[]=new int[A.length];
		for(int i=0;i<su.length;i++){
			su[i]=A[i].index;
		}
		return su;
	}
	
}

//suffix array Struct
class Suffix implements Comparable<Suffix>{
	int index;
	int rank;
	int next;
	public Suffix(int i,int rank,int next){
		this.index=i;
		this.rank=rank;
		this.next=next;
	}
	
	@Override
	public int compareTo(Suffix other) {
		if(this.rank==other.rank){
			return this.next-other.next;
		}
		return this.rank-other.rank;
	}
	
	public String toString(){
		return this.index+"   "+this.rank+"   "+this.next+"  ";
	}
}




 
class Wrapper implements Comparable<Wrapper>{
	int spf;int cnt;
	public Wrapper(int spf,int cnt){
		this.spf=spf;
		this.cnt=cnt;
	}
		
	@Override
	public int compareTo(Wrapper other) {
		return this.spf-other.spf;
	}
}


