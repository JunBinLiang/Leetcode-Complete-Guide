Given an array A (index starts at 1) consisting of N integers: A1, A2, ..., AN and an integer B. The integer B denotes that from any place (suppose the index is i) in the array A, you can jump to any one of the place in the array A indexed i+1, i+2, …, i+B if this place can be jumped to. Also, if you step on the index i, you have to pay Ai coins. If Ai is -1, it means you can’t jump to the place indexed i in the array.

Now, you start from the place indexed 1 in the array A, and your aim is to reach the place indexed N using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed N using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it's not possible to reach the place indexed N then you need to return an empty array.

Example 1:

Input: [1,2,4,-1,2], 2
Output: [1,3,5]
 

Example 2:

Input: [1,2,4,-1,2], 1
Output: []
 

Note:

Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first i where Pai and Pbi differ, Pai < Pbi; when no such i exists, then n < m.
A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].
Length of A is in the range of [1, 1000].
B is in the range of [1, 100].








class Solution {
    int B;
    int dp[][];
    int A[];
    public List<Integer> cheapestJump(int[] A, int B) {
        this.B=B;
        this.A=A;
        List<Integer>res=new ArrayList<>();
        dp=new int[A.length][2];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-2);
        }
        
        dfs(0);
        
        int i=0;
        res.add(i+1);
        while(i!=A.length-1){
            i=dp[i][1];
            if(i==-1)break;
            res.add(i+1);
        }
        if(res.get(res.size()-1)!=A.length)return new ArrayList<>();
        
        return res;
    }
    
    public int dfs(int cur){
        if(cur==A.length-1){
            return A[cur];
        }
        if(dp[cur][0]!=-2)return dp[cur][0];
        int res=Integer.MAX_VALUE;
        int next=-1;
        int price=A[cur];
        for(int i=1;i<=B;i++){
            if(cur+i>=A.length)break;
            if(A[cur+i]==-1)continue;
            int v=dfs(cur+i);
            if(v==-1)continue;
            if(v+price<res){
                next=cur+i;
                res=v+price;
            }
        }
        if(next==-1)res=-1;
        dp[cur][0]=res;
        dp[cur][1]=next;
        return res;
    }
}
