Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.

Example 1:

Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
Example 2:

Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.
Example 3:

Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
Note:
root represents a binary tree with at least 1 node and at most 1000 nodes.
Every node has a unique node.val in range [1, 1000].
There exists some node in the given binary tree for which node.val == k.








/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer>graph[];
    Set<Integer>leafs=new HashSet<>();
    public int findClosestLeaf(TreeNode root, int k) {
        graph=new ArrayList[1010];
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<>();
        }
        boolean visit[]=new boolean[1010];
        dfs(null,root);
        Queue<Integer>q=new LinkedList<>();
        q.add(k);
        visit[k]=true;
        
        while(q.size()!=0){
            int top=q.poll();
            if(leafs.contains(top))return top;
            
            List<Integer>next=graph[top];
            
            for(int c:next){
                if(!visit[c]){
                    visit[c]=true;
                    q.add(c);
                }
            }
        }
        
        return -1;
        
    }
    public void dfs(TreeNode p,TreeNode root){
        
        if(root==null)return;
        
        if(p!=null){
            int v1=p.val;
            int v2=root.val;
            graph[v1].add(v2);
            graph[v2].add(v1);
        }
        
        if(root.left==null&&root.right==null){
            leafs.add(root.val);
        }
        
        dfs(root,root.left);
        dfs(root,root.right);
    }
    
}
