给你一个 非递减 的正整数数组 nums 和整数 K，判断该数组是否可以被分成一个或几个 长度至少 为 K 的 不相交的递增子序列。


输入：nums = [1,2,2,3,3,4,4], K = 3
输出：true
解释：
该数组可以分成两个子序列 [1,2,3,4] 和 [2,3,4]，每个子序列的长度都至少是 3。


输入：nums = [5,6,6,7,8], K = 3
输出：false
解释：
没有办法根据条件来划分数组。


思路：找出最大那个就行，代码看一下想想为什么，一道绕脑筋的题目

class Solution {
    public boolean canDivideIntoSubsequences(int[] A, int k) {
         Map<Integer,Integer>map=new HashMap<>();
       for(int i:A){
           if(!map.containsKey(i))map.put(i,0);
           map.put(i,map.get(i)+1);
       }
       
       int max=0;

        for(Integer key:map.keySet()){
           if(max<map.get(key)){
               max=map.get(key);
           }
        }
       
        return max*k<=A.length;
    }
}
