给你一个 非递减 的正整数数组 nums 和整数 K，判断该数组是否可以被分成一个或几个 长度至少 为 K 的 不相交的递增子序列。


输入：nums = [1,2,2,3,3,4,4], K = 3
输出：true
解释：
该数组可以分成两个子序列 [1,2,3,4] 和 [2,3,4]，每个子序列的长度都至少是 3。


输入：nums = [5,6,6,7,8], K = 3
输出：false
解释：
没有办法根据条件来划分数组。


思路：找出最大那个就行，代码看一下想想为什么，一道绕脑筋的题目

class Solution {
    public boolean canDivideIntoSubsequences(int[] A, int k) {
         Map<Integer,Integer>map=new HashMap<>();
       for(int i:A){
           if(!map.containsKey(i))map.put(i,0);
           map.put(i,map.get(i)+1);
       }
       
       int max=0;

        for(Integer key:map.keySet()){
           if(max<map.get(key)){
               max=map.get(key);
           }
        }
       
        return max*k<=A.length;
    }
}










根据频率最大的来决定，其他频率小的肯定能给频率大的给接上









Given a non-decreasing array of positive integers nums and an integer K, find out if this array can be divided into one or more disjoint increasing subsequences of length at least K.

 

Example 1:

Input: nums = [1,2,2,3,3,4,4], K = 3
Output: true
Explanation: 
The array can be divided into the two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each.
Example 2:

Input: nums = [5,6,6,7,8], K = 3
Output: false
Explanation: 
There is no way to divide the array using the conditions required.
 

Note:

1 <= nums.length <= 10^5
1 <= K <= nums.length
1 <= nums[i] <= 10^5






class Solution {
public:
    bool canDivideIntoSubsequences(vector<int>& A, int k) {
        unordered_map<int,int>hash;
        int mx=0;
        for(int i=0;i<A.size();i++){
            hash[A[i]]++;
            mx=max(mx,hash[A[i]]);
        }
        
        if(mx*k>A.size())return false;
        
        return true;
        
    }
};
