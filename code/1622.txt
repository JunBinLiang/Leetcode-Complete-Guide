import java.math.*; 
class Fancy {
    int mod=1000000007;
    long A[]=new long[100010];
    long B[]=new long[100010];
    long C[]=new long[100010];
    int index=-1;
    public void append(int val) {
        index++;
        A[index]=val;
        B[index]=0;
        C[index]=1;
        if(index>0){
            B[index]=B[index-1];
            C[index]=C[index-1];
        }
    }
    
    public void addAll(int inc) {
        B[index]+=inc;B[index]%=mod;
    }
    
    public void multAll(int m) {
        B[index]*=m;
        B[index]%=mod;
        C[index]*=m;
        C[index]%=mod;
    }
    
    public int getIndex(int idx) {
        if(idx>index)return -1;
        long ori=A[idx];
        long pre=get(B,idx-1);
        long tomul=CC(index,idx-1);
        long toadd=B[index]-(get(B,idx-1)*tomul)%mod;
        if(toadd<0)toadd+=mod;
        ori=ori*tomul+toadd;
        return (int)(ori%mod);
    }
    public long CC(int i,int j){
        if(j<0)return C[i];
		long mod=1000000007;
		long a=C[i];
		long b=C[j];
		BigInteger B= BigInteger.valueOf(b);
		long binverse=B.modInverse(BigInteger.valueOf(mod)).longValue();
		return ((a)*(binverse%mod))%mod;
	}
    public long get(long arr[],int i){
        if(i<0)return 0;
        return arr[i];
    }
}

/**
 * Your Fancy object will be instantiated and called as such:
 * Fancy obj = new Fancy();
 * obj.append(val);
 * obj.addAll(inc);
 * obj.multAll(m);
 * int param_4 = obj.getIndex(idx);
 */
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 //105/107pass
 
 class Fancy {
    int mod=1000000007;
    Seg seg;
    int index=0;
    public Fancy() {
        seg=new Seg(0,1000010);
    }
    
    //state0:add    state1:mul
    public void append(int val) {
        seg.update(index,index,val,0);
        index++;
        //System.out.println("after append  :"+seg.query(index,0));
    }
    
    public void addAll(int inc) {
        if(index==0)return;
        seg.update(0,index-1,inc,0);
        //System.out.println("after addall  :"+seg.query(index-1,0));
    }
    
    public void multAll(int m) {
        seg.update(0,index-1,m,1);
    }
    
    public int getIndex(int idx) {
        if(idx>=index)return -1;
        long res=seg.query(idx);
        return (int)(res);
    }
    
    
    //laza propogation
    class Seg{
        int s,e;
        long val=0;
        long m=1;
        Seg left=null,right=null;
        List<long[]>ops=new ArrayList<>();
        public Seg(int l,int r){
            this.s=l;
            this.e=r;
            if(s!=e){
                //int mid=s+(e-s)/2;
                //if(s<=mid)left=new Seg(s,mid);
                //if(e>=mid+1)right=new Seg(mid+1,e);
            }else{
                //done initialization
            }
        }
        
        public long query(int index){
            long res=0;
            if(s==e){
                for(long pair[]:ops){
                    if(pair[0]==0){
                        res+=pair[1];
                    }
                    else{
                        res*=pair[1];
                    }
                    res%=mod;
                }
                return res;
            }
            int mid=s+(e-s)/2;
            
            if(index<=mid){
                if(left==null)left=new Seg(s,mid);
                res=left.query(index);
            }else{
                if(right==null)right=new Seg(mid+1,e);
                res=right.query(index);
            }
            
            for(long pair[]:ops){
                if(pair[0]==0){
                    res+=pair[1];
                }
                else{
                    res*=pair[1];
                }
                res%=mod;
            }
            return res;
        }
        
        
        public void update(int l,int r,long v,int state){ 
            if(l==s&&r==e){
                if(state==0){
                    ops.add(new long[]{state,v});
                }
                else{
                    ops.add(new long[]{state,v});
                }
                return;
            }

            int mid=s+(e-s)/2;
            if(left==null)left=new Seg(s,mid);
            if(right==null)right=new Seg(mid+1,e);
            
            if(r<=mid){
                left.update(l,r,v,state);
            }
            else if(l>=mid+1){
                right.update(l,r,v,state);
            }else{
                left.update(l,mid,v,state);
                right.update(mid+1,r,v,state);
            }
        }
    }//end of tree
    
}



/**
 * Your Fancy object will be instantiated and called as such:
 * Fancy obj = new Fancy();
 * obj.append(val);
 * obj.addAll(inc);
 * obj.multAll(m);
 * int param_4 = obj.getIndex(idx);
 */
