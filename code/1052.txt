class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int k) {
        //not grumpy for X minutes straight, but can only use it once.
        int res=0;
        int n=customers.length;
        Queue<Integer>q=new LinkedList<>();
        int sum=0;
        
        int front[]=new int[n];
        int back[]=new int[n];
        
        for(int i=0;i<n;i++){
            if(grumpy[i]==0)sum+=customers[i];
            front[i]=sum;
        }
        
        sum=0;
        for(int i=n-1;i>=0;i--){
            if(grumpy[i]==0)sum+=customers[i];
            back[i]=sum;
        }
        
        sum=0;
        for(int i=0;i<n;i++){
            q.add(customers[i]);
            sum+=customers[i];
            if(q.size()<k)continue;
            res=Math.max(res,sum+get(back,i+1)+get(front,i-k));
            sum-=q.poll();
        }
        return res;
    }
    
    public int get(int A[],int i){
        if(i<0||i>=A.length)return 0;
        return A[i];
    }
}
