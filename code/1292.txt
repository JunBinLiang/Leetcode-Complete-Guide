思路：
二分法+dp


代码：

class Solution {
    int dp[][];
    public int maxSideLength(int[][] grid, int threshold) {
        int res=0;
        int r=grid.length;
        int c=grid[0].length;
        dp=new int[r+1][c+1];
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                dp[i][j]=grid[i-1][j-1]-dp[i-1][j-1]+dp[i-1][j]+dp[i][j-1];
            }
        }
        
        int l=1;r=Math.max(r,c);
        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(grid,mid,threshold)){
                res=mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
            
        }
        
        return res;
    }
    
    public boolean check(int grid[][],int len,int threshold){
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                int r1=i-len+1;
                int c1=j-len+1;
                if(r1<0||c1<0)continue;
                int sum=sumRegion(r1,c1,i,j);
                if(sum<=threshold)return true;
            }
        }
        return false;
    }
    
    public int sumRegion(int r1, int c1, int r2, int c2) {
        return dp[r2+1][c2+1]-dp[r1][c2+1]-dp[r2+1][c1]+dp[r1][c1];
    }
}
