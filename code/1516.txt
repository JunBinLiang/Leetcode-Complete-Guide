题意：
给你一颗n-arr 的树 和两个node： p 和 q, 你要把p 变成q 的child

思路：先dfs 拿到p pparent q qparent 的referentce,然后根据不同的可能性来进行指针操作(只有几个case 要去考虑,可参照题目给出例子)



代码：

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    
    public Node() {
        children = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        children = new ArrayList<Node>();
    }
    
    public Node(int _val,ArrayList<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    Node p,q,pparent,qparent;
    boolean check=false; //if q is p subtree
    public Node moveSubTree(Node root, Node p, Node q) {
        this.p=p;
        this.q=q;

        dfs(null,root);
        
        issub(p);

        if(pparent==q){//is already child
            return root;
        }

        if(check){//q is subtree of p
            if(p==root){
                
                remove(qparent.children,q);
                q.children.add(p);
                return q;
            }else{
                int index=find(pparent.children,p);
                pparent.children.set(index,null);
                remove(qparent.children,q);
                q.children.add(p);
                pparent.children.set(index,q);
                return root;
            }
        }else{
            
            remove(pparent.children,p);
            q.children.add(p);
            return root;
        }
    }

    public int find(List<Node>list,Node node){
        for(int i=0;i<list.size();i++){
            if(list.get(i)==node)return i;
        }
        return -1;
    }

     public void issub(Node root){
        if(root==null)return;
        if(root.val==q.val)check=true;
        List<Node>childs=root.children;
        for(Node c:childs){
            issub(c);
        }
    }

    public void dfs(Node parent,Node r){
        if(r==null)return;
        
        if(r.val==p.val){
            p=r;
            pparent=parent;
        }

        if(r.val==q.val){
            q=r;
            qparent=parent;
        }

        List<Node>childs=r.children;

        for(Node c:childs){
            dfs(r,c);
        }
    }

    public void remove(List<Node> list, Node target){
        if(target==null)return;
        int index=0;
        for(int i=0;i<list.size();i++){
            if(list.get(i).val==target.val){
                index=i;
            }
        }
        list.remove(index);
    }
}
