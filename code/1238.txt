class Solution {
    public List<Integer> circularPermutation(int n, int start) {
        List<Integer>res=new ArrayList<>();
        List<Integer>l1=new ArrayList<>();
        List<Integer>l2=new ArrayList<>();
        res.add(0);
        res.add(1);
        
        for(int i=1;i<n;i++){
            List<Integer>tail=new ArrayList<>();
            //int last=res.get(res.size()-1);
            //tail.add(last+(1<<i));
            
            for(int j=res.size()-1;j>=0;j--){
                tail.add(res.get(j)+(1<<i));
            }
            
            res.addAll(tail);
        }
        
        
        int index=-1;
        for(int i=0;i<res.size();i++){
            if(res.get(i)==start)index=i;
        }
        
        for(int i=index;i<res.size();i++){
            l1.add(res.get(i));
        }
        
        for(int i=0;i<index;i++){
            l2.add(res.get(i));
        }
        l1.addAll(l2);
        return l1;
        //011 
        //010
        //000
        //001
        //101
        //111
        //110 ...
    }
}
