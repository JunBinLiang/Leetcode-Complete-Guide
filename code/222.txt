/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int h=0;
    bool good=false;
    int countNodes(TreeNode* root) {
        if(root==NULL)return 0;
       
        go(root);
        int upper=(1<<(h-1))-1;
        int r=(1<<h)-(1+upper);
        int total=r;
        
        int last=0;
        int l=0;
        
        while(l<=r){
            int mid=l+(r-l)/2;
            good=false;
            dfs(root,mid,total,1);
            if(good){
                last=mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        
        return upper+last;
    }
    
    //1 2 3 4    5 6 7 8
    
    void dfs(TreeNode* root,int ith,int total,int level){
        if(root==NULL)return;
        
        if(level==h){
            good=true;
            return;
        }
        
        if(ith<=total/2){
            dfs(root->left,ith,total/2,level+1);
        }else{
            dfs(root->right,ith-total/2,total/2,level+1);
        }
    }
    
    void go(TreeNode* root){
        if(root==NULL)return;
        go(root->left);
        h++;
    }
};
