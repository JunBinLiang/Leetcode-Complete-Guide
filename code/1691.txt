class Solution {
    public int maxHeight(int[][] A) {
        int n=A.length;
        int dp1[]=new int[n];
        int dp2[]=new int[n];
        int dp3[]=new int[n];
        for(int p[]:A){
            Arrays.sort(p);
        }
        int res=0;
        
        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });
        
        
        for(int i=0;i<A.length;i++){//sort 0
            int mx=0;
            for(int j=i-1;j>=0;j--){
                if(A[i][1]>=A[j][1]&&A[i][2]>=A[j][2]){
                    mx=Math.max(mx,dp1[j]);
                }
            }
            dp1[i]=A[i][2]+mx;
            res=Math.max(res,dp1[i]);
        }
        
        
        Arrays.sort(A,(a,b)->{//sort 1
            return a[1]-b[1];
        });
        
        for(int i=0;i<A.length;i++){
            int mx=0;
            for(int j=i-1;j>=0;j--){
                if(A[i][0]>=A[j][0]&&A[i][2]>=A[j][2]){
                    mx=Math.max(mx,dp2[j]);
                }
            }
            dp2[i]=A[i][2]+mx;
            res=Math.max(res,dp2[i]);
        }
        
        
        Arrays.sort(A,(a,b)->{//sort 2
            return a[2]-b[2];
        });
        
        for(int i=0;i<A.length;i++){
            int mx=0;
            for(int j=i-1;j>=0;j--){
                if(A[i][0]>=A[j][0]&&A[i][1]>=A[j][1]){
                    mx=Math.max(mx,dp3[j]);
                }
            }
            dp3[i]=A[i][2]+mx;
            res=Math.max(res,dp3[i]);
        }
        
        return res;
    }
    
}
