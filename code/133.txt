/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    Map<Node,Integer>map=new HashMap<>();
    Map<Integer,Node>newNodes=new HashMap<>();
    int id=0;
    Set<Node>set=new HashSet<>();
    public Node cloneGraph(Node node) {
        if(node==null)return null;
        dfs(node);
        dfsAdd(node);
        return newNodes.get(0);
    }
    
    public void dfs(Node root){
        List<Node>childs=root.neighbors;
        Node newnode=new Node(root.val);
        newNodes.put(id,newnode);
        map.put(root,id++);
        for(Node c:childs){
            if(map.containsKey(c))continue;
            dfs(c);
        }
    }
    
    public void dfsAdd(Node root){
        set.add(root);
        List<Node>childs=root.neighbors;
        int id=map.get(root);
        Node newNode=newNodes.get(id);
        for(Node c:childs){
            id=map.get(c);
            newNode.neighbors.add(newNodes.get(id));
        }
        
        for(Node c:childs){
            if(set.contains(c))continue;
            dfsAdd(c);
        }
    }
    
    
}
