Assume you have an array of length n initialized with all 0's and are given k update operations.

Each operation is represented as a triplet: [startIndex, endIndex, inc] which increments each element of subarray A[startIndex ... endIndex] (startIndex and endIndex inclusive) with inc.

Return the modified array after all k operations were executed.

Example:

Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]
Output: [-2,0,3,5,3]
Explanation:

Initial state:
[0,0,0,0,0]

After applying operation [1,3,2]:
[0,2,2,2,0]

After applying operation [2,4,3]:
[0,2,5,5,3]

After applying operation [0,2,-2]:
[-2,0,3,5,3]













class Solution {
public:
    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {
        vector<int>A(length);vector<int>res(length);
        for(vector<int>&pair:updates){
            A[pair[0]]+=pair[2];
            if(pair[1]+1<A.size()){
                 A[pair[1]+1]-=pair[2];
            }
        }
        
        int sum=0;
        for(int i=0;i<A.size();i++){
            sum+=A[i];
            res[i]=sum;
        }
        return res;
    }
};
