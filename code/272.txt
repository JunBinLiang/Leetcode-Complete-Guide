Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?








/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer>res=new ArrayList<>();
        Stack<TreeNode>left=new Stack<>();
        Stack<TreeNode>right=new Stack<>();
        TreeNode cur=root;
        while(cur!=null){
            if(cur.val<=target){
                left.push(cur);
                TreeNode temp=cur;
                cur=cur.right;
                temp.right=null;
            }
            else{
                right.push(cur);
                TreeNode temp=cur;
                cur=cur.left;
                temp.left=null;
            }
        }
        
        inorder1(right);
        inorder2(left);

        
        for(int i=0;i<k;i++){
            if(left.size()==0){
                res.add(right.peek().val);
                if(right.peek().right!=null){
                    TreeNode peek=right.pop();
                    right.push(peek.right);
                }
                else{
                    right.pop();
                }
                inorder1(right);
            }
            else if(right.size()==0){
                res.add(left.peek().val);
                if(left.peek().left!=null){
                    TreeNode peek=left.pop();
                    left.push(peek.left);
                }else{
                    left.pop();
                }
                inorder2(left);
            }
            else{
                if(Math.abs(left.peek().val-target)<Math.abs(right.peek().val-target)){
                    res.add(left.peek().val);
                    if(left.peek().left!=null){
                        TreeNode peek=left.pop();
                        left.push(peek.left);
                    }
                    else{
                        left.pop();
                    }
                    inorder2(left); 
                }
                else{
                    res.add(right.peek().val);
                    if(right.peek().right!=null){
                        TreeNode peek=right.pop();
                        right.push(peek.right);
                    }
                    else{
                        right.pop();
                    }
                    inorder1(right);
                }
                
            }
        }
        return res;
    }
    
    public void inorder1(Stack<TreeNode>stack){
        while(stack.size()>0&&stack.peek().left!=null){
            TreeNode l=stack.peek().left;
            stack.peek().left=null;
            stack.push(l);
        }
    }
    
    public void inorder2(Stack<TreeNode>stack){
        while(stack.size()>0&&stack.peek().right!=null){
            TreeNode r=stack.peek().right;
            stack.peek().right=null;
            stack.push(r);
        }
    }
    
    
}
