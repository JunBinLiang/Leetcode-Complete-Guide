We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.

 

Example 1:

Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.
Example 2:

Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]
 

Constraints:

1 <= schedule.length , schedule[i].length <= 50
0 <= schedule[i].start < schedule[i].end <= 10^8










/*
// Definition for an Interval.
class Interval {
    public int start;
    public int end;

    public Interval() {}

    public Interval(int _start, int _end) {
        start = _start;
        end = _end;
    }
};
*/

class Solution {
    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {
        List<Interval>A=new ArrayList<>();
        List<Interval>res=new ArrayList<>();
        for(List<Interval>p:schedule){
            for(Interval i:p){
                A.add(i);
            }
        }
        Collections.sort(A,(a,b)->{
            return a.start-b.start;
        });
        
        Stack<Interval>stack=new Stack<>();
        
        for(int i=0;i<A.size();i++){
            if(stack.size()==0)stack.push(A.get(i));
            else{
                if(A.get(i).start<=stack.peek().end){
                    stack.peek().end=Math.max(stack.peek().end,A.get(i).end);
                }
                else{
                    stack.push(A.get(i));
                }
            }
        }
        
        A=new ArrayList<>(stack);
        
        for(int i=1;i<A.size();i++){
            res.add(new Interval(A.get(i-1).end,A.get(i).start));
        }
        
        return res;
    }
}
