思路：二分法或者用heap都行。。。详细看代码

Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].

The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.

A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).

 

Example 1:



Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 
Example 2:



Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2
Example 3:



Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
 

Note:

1 <= R, C <= 100
0 <= A[i][j] <= 10^9












class Solution {
    boolean visit[][];
    public int maximumMinimumPath(int[][] A) {
        int l=0,r=1000000000;
        int res=0;
        while(l<=r){
            int mid=l+(r-l)/2;
            visit=new boolean[A.length][A[0].length];
            if(dfs(A,0,0,mid)){
                res=mid;
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }
        
        return res;
    }
    
    public boolean dfs(int A[][],int r,int c,int mid){
        if(r<0||c<0||r>=A.length||c>=A[0].length)return false;
        if(A[r][c]<mid)return false;
        if(r==A.length-1&&c==A[0].length-1)return true;
        if(visit[r][c])return false;
        visit[r][c]=true;
        return dfs(A,r+1,c,mid)|dfs(A,r-1,c,mid)|dfs(A,r,c+1,mid)|dfs(A,r,c-1,mid);
    }
}
