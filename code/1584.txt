//Java
class Solution {
    public int minCostConnectPoints(int[][] points) {
        if(points.length==1)return 0;
        int nums[]=new int[points.length];
        for(int i=0;i<nums.length;i++){
            nums[i]=i;
        }
        List<int[]>edges=new ArrayList<>();
        for(int i=0;i<points.length;i++){
            for(int j=i+1;j<points.length;j++){
                int cost=cal(points[i][0],points[j][0],points[i][1],points[j][1]);
                edges.add(new int[]{i,j,cost});
            }
        }
        int res=0;
        Collections.sort(edges,(a,b)->{
            return a[2]-b[2];
        });
        
        for(int pair[]:edges){
            
            int v1=pair[0];
            int v2=pair[1];
            int r1=find(nums,v1);
            int r2=find(nums,v2);
            if(r1==r2)continue;
            nums[r1]=r2;
            res+=pair[2];
           // System.out.println(v1+"  "+v2+"  "+pair[2]);
        }
        
        return res;
    }
    
    public int cal(int x1,int x2,int y1,int y2){
        return Math.abs(x1-x2)+Math.abs(y1-y2);
    }
    
    public int find(int nums[],int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
}








//C++
class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& A) {
        vector<int>nums(A.size());
        for(int i=0;i<nums.size();i++){
            nums[i]=i;
        }
        
        vector<vector<int>>edges;
        for(int i=0;i<A.size();i++){
            for(int j=i+1;j<A.size();j++){
                int cost=abs(A[i][0]-A[j][0])+abs(A[i][1]-A[j][1]);
                edges.push_back({i,j,cost});
            }
        }
        
        sort(edges.begin(), edges.end(), [](const vector<int> & a, const vector<int> & b) -> bool
        { 
            return a[2] <b[2]; 
        });
        
        int res=0;
        for(vector<int>&edge:edges){
            int v=edge[0],u=edge[1],w=edge[2];
            int r1=find(nums,v);
            int r2=find(nums,u);
            if(r1!=r2){
                nums[r1]=r2;
                res+=w;
            }
        }
        
        return res;
    
    }
    
    int find(vector<int>&nums,int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
};

