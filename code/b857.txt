import java.util.*;

class Solution {
    public int[] solve(int[] A) {
        int n=A.length;
        int res[]=new int[n];
        List<int[]>list=new ArrayList<>();
        for(int i=0;i<A.length;i++){
            list.add(new int[]{A[i],i});
        }
        Collections.sort(list,(a,b)->{
            return a[0]-b[0];
        });
        int arr[]=new int[n];
        Arrays.fill(arr,1);
        Fenwick fen=new Fenwick(arr);
        
        for(int i=0;i<list.size();i++){
            int pair[]=list.get(i);
            int index=pair[1];
            
            int left=fen.sumRange(0,index-1);
            fen.update(index,-1);
            res[i]=left;
        }
        
        return res;
        
    }
    
    class Fenwick {
        int tree[];//1-index based
        int A[];
        int arr[];
        public Fenwick(int[] A) {
            this.A=A;
            arr=new int[A.length];
            tree=new int[A.length+1];
            int sum=0;
            for(int i=0;i<A.length;i++){
                update(i,A[i]);
            }
        }

        public void update(int i, int val) {
            arr[i]+=val;
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
            
        }

        public int sumRange(int i, int j) {
            
            return pre(j+1)-pre(i);
        }

        public int pre(int i){
            int sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }
}
