class Solution {
public:
    unordered_map<int,int>xmap;
    unordered_map<int,int>ymap;
    unordered_map<int,int>dia1;
    unordered_map<int,int>dia2;
    unordered_set<string>set;
    vector<int> gridIllumination(int N, vector<vector<int>>& lamps, vector<vector<int>>& queries) {
        vector<int>v;
        for(vector<int>&p:lamps){
            int x=p[0],y=p[1];
            xmap[x]++;ymap[y]++;
            dia1[x+y]++;dia2[x-y]++;
            set.insert(to_string(x)+","+to_string(y));
        }
        
        for(vector<int>&p:queries){
            int x=p[0],y=p[1];
            if(xmap.count(x)==0&&ymap.count(y)==0&&dia1.count(x+y)==0&&dia2.count(x-y)==0)v.push_back(0);
            else v.push_back(1);
            check(x,y);
            check(x+1,y);
            check(x-1,y);
            check(x,y+1);
            check(x,y-1);
            check(x+1,y+1);
            check(x+1,y-1);
            check(x-1,y+1);
            check(x-1,y-1);
        }
        return v;
    }
    
    void check(int x,int y){
        string state=to_string(x)+","+to_string(y);
        if(set.find(state)==set.end())return;//has light
        set.erase(state);
        xmap[x]--;
        ymap[y]--;
        dia1[x+y]--;
        dia2[x-y]--;
        if(xmap[x]==0)xmap.erase(x);
        if(ymap[y]==0)ymap.erase(y);
        if(dia1[x+y]==0)dia1.erase(x+y);
        if(dia2[x-y]==0)dia2.erase(x-y);
    }
};
