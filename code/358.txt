Given a non-empty string s and an integer k, rearrange the string such that the same characters are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:

Input: s = "aabbcc", k = 3
Output: "abcabc" 
Explanation: The same letters are at least distance 3 from each other.
Example 2:

Input: s = "aaabc", k = 3
Output: "" 
Explanation: It is not possible to rearrange the string.
Example 3:

Input: s = "aaadbbcc", k = 2
Output: "abacabcd"
Explanation: The same letters are at least distance 2 from each other.








class Solution {
    public String rearrangeString(String s, int k) {
        StringBuilder str=new StringBuilder();
        Map<Character,Integer>map=new HashMap<>();
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            return b[1]-a[1];
        });
        
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(!map.containsKey(c))map.put(c,0);
            map.put(c,map.get(c)+1);
        }
        
       
        
        for(Character key:map.keySet()){
            pq.add(new int[]{(int)(key),map.get(key)});
        }
        
        List<int[]>list=new ArrayList<>();
        
        while(str.length()!=s.length()){
            if(pq.size()==0)return "";
            int top[]=pq.poll();
            
            char c=(char)(top[0]);
            str.append(c+"");
            
            
            top[1]--;
            if(top[1]>0){
                list.add(new int[]{top[0],top[1],k});
            }
            for(int i=0;i<list.size();i++){
                list.get(i)[2]--;
            }
            Collections.sort(list,(a,b)->{
                return b[2]-a[2];
            });
            
            int size=list.size();
            for(int i=0;i<size;i++){
                int last[]=list.get(list.size()-1);
                if(last[2]<=0){
                    list.remove(list.size()-1);
                    pq.add(new int[]{last[0],last[1]});
                }
                else{
                    break;
                }
            }
            
        }
        
        
        
        return str.toString();
    }
}
