class Solution {
    public List<List<Integer>> kSmallestPairs(int[] A, int[] B, int k) {
        if(A.length==0||B.length==0)return new ArrayList<>();
        int l=A[0]+B[0];
        int r=A[A.length-1]+B[B.length-1];
        int sum=r;
        while(l<=r){
            int mid=l+(r-l)/2;
            int cnt=get(A,B,mid);
            if(cnt<k){
                l=mid+1;
            }else{
                sum=mid;
                r=mid-1;
            }
        }
        
        
        List<List<Integer>>res=new ArrayList<>();
        for(int i=0;i<A.length;i++){
            int cur=A[i];
            l=0;r=B.length-1;
            int pos=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(B[mid]+cur<=sum){
                    pos=mid;
                    l=mid+1;
                }else{
                    r=mid-1;
                }
            }
            
            for(int j=0;j<=pos;j++){
                List<Integer>pair=new ArrayList<>();
                pair.add(cur);pair.add(B[j]);
                res.add(pair);
            }
        }
        
        Collections.sort(res,(a,b)->{
            return a.get(0)+a.get(1)-(b.get(0)+b.get(1));
        });
        
        List<List<Integer>>ans=new ArrayList<>();
        for(int i=0;i<Math.min(k,res.size());i++){
            ans.add(res.get(i));
        }
        
        return ans;
    }
    
    public int get(int A[],int B[],int T){
        int cnt=0;
        for(int i=0;i<A.length;i++){
            int cur=A[i];
            int l=0,r=B.length-1;
            int pos=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(B[mid]+cur<=T){
                    pos=mid;
                    l=mid+1;
                }else{
                    r=mid-1;
                }
            }
            if(pos!=-1)cnt+=(pos+1);
        }
        return cnt;
    }
}
