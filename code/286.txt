You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
  
  
  
  
  
  
  
  
  
  class Solution {
public:
    int EMP=2147483647;
    bool visit[500][500];
    queue<vector<int>>q;
    void wallsAndGates(vector<vector<int>>& A) {
        //0:gate    -1:bad
        memset(visit,false,sizeof(visit));
        for(int i=0;i<A.size();i++){
            for(int j=0;j<A[0].size();j++){
                if(A[i][j]==0){
                    visit[i][j]=true;
                    q.push({i,j,0});
                }
            }
        }
        while(q.size()!=0){
            vector<int>top=q.front();q.pop();
            int r=top[0],c=top[1],level=top[2];
            A[r][c]=level;
            
            add(A,r+1,c,level+1);
            add(A,r-1,c,level+1);
            add(A,r,c+1,level+1);
            add(A,r,c-1,level+1);
        }
        
        
        return;
    }
    
    void add(vector<vector<int>>& A,int i,int j,int level){
        if(i<0||j<0||i>=A.size()||j>=A[0].size())return;
        if(visit[i][j])return;
        if(A[i][j]==-1)return;
        q.push({i,j,level});
        visit[i][j]=true;
    }
};
