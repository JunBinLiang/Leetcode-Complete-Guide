There are N cities numbered from 1 to N.

You are given connections, where each connections[i] = [city1, city2, cost] represents the cost to connect city1 and city2 together.  (A connection is bidirectional: connecting city1 and city2 is the same as connecting city2 and city1.)

Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.

 

Example 1:



Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: 
Choosing any 2 edges will connect all cities so we choose the minimum 2.
Example 2:



Input: N = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: 
There is no way to connect all cities even if all edges are used.
 

Note:

1 <= N <= 10000
1 <= connections.length <= 10000
1 <= connections[i][0], connections[i][1] <= N
0 <= connections[i][2] <= 10^5
connections[i][0] != connections[i][1]




class Solution {
public:
    int minimumCost(int N, vector<vector<int>>& connections) {
        vector<int>nums(N);
        for(int i=0;i<N;i++){
            nums[i]=i;
        }
        
        int res=0;
        sort(connections.begin(),connections.end(),[](const vector<int>&a,const vector<int>&b){
            return a[2]<b[2];
        });
        for(vector<int>&p:connections){
            int v1=p[0]-1,v2=p[1]-1,w=p[2];
            int r1=find(nums,v1);
            int r2=find(nums,v2);
            if(r1!=r2){
                nums[r1]=r2;
                res+=w;
            }
        }
        
        unordered_set<int>hash;
        
        for(int i=0;i<N;i++){
            int r1=find(nums,i);
            hash.insert(r1);
        }
        if(hash.size()!=1)return -1;
        return res;
    }
    
    int find(vector<int>&nums,int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
};
