class Solution {
    int pre[];int dp[][];
    int k;
    public int mergeStones(int[] A, int k) {
        if(A.length==1)return 0;
        if(k>A.length)return -1;
        this.k=k;
        int n=A.length;
        while(n>0){
            n=n-k+1;
            if(n==1)break;
            if(n<k)return -1;
        }
        dp=new int[A.length][A.length];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        
        pre=new int[A.length];
        pre[0]=A[0];
        for(int i=1;i<A.length;i++){
            pre[i]=pre[i-1]+A[i];
        }
        
        int res = dfs(A,0,A.length-1);
        
        
        return res;
    }
    
    public int dfs(int A[],int l,int r){
        if(l>r)return 0;
        if(r-l+1<k){
            return 0;
        }
        if(r-l+1==k){
            return pre[r]-get(pre,l-1);
        }
        
        if(dp[l][r]!=-1)return dp[l][r];
        int res=Integer.MAX_VALUE;
        int sum=pre[r]-get(pre,l-1);
        
        for(int i=l+1;i<=r;i++){
            int ll=dfs(A,l,i-1);
            int rr=dfs(A,i,r);
           
            int lsize=remain(i-l);
            int rsize=remain(r-i+1);
            if(lsize+rsize>=k){
                res=Math.min(res,ll+rr+sum);
            }else{
                res=Math.min(res,ll+rr);
            }
            
        }
        
        dp[l][r]=res;
        return res;
    }
    
    public int get(int A[],int i){
        if(i<0)return 0;
        return A[i];
    }
    
    public int remain(int size){
        while(size>=k){
            int com=size/k;
            size=size%k;
            size+=com;
        }
        return size;
    } 
}









little simplify



class Solution {
    int pre[];
    int K;
    int dp[][];
    public int mergeStones(int[] A, int K) {
        this.K=K;
        int N=A.length;
        while(N>=K){
            N-=K;
            N++;
        }
        if(N!=1)return -1;
        
        
        int sum=0;
        pre=new int[A.length];
        for(int i=0;i<A.length;i++){
            sum+=A[i];
            pre[i]=sum;
        }
        dp=new int[A.length][A.length];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        
        return dfs(A,0,A.length-1);
    }
    
    public int dfs(int A[],int l,int r){
        if(r-l+1<K){
            return 0;
        }
        if(r-l+1==K){
            return pre[r]-get(pre,l-1);
        }
        if(dp[l][r]!=-1)return dp[l][r];
        int res=Integer.MAX_VALUE;
        for(int i=l+1;i<=r;i++){
            int a=dfs(A,l,i-1);
            int b=dfs(A,i,r);
            
            int lsize=remain(i-l);
            int rsize=remain(r-i+1);
            
            if(lsize+rsize==K){
                res=Math.min(res,a+b+pre[r]-get(pre,l-1));
            }
            else if(lsize+rsize>K){
                 res=Math.min(res,a+b+1000000);
            }
            else{
                res=Math.min(res,a+b);
            }
        }
        
        dp[l][r]=res;
        return res;
    }
    
    public int get(int A[],int i){
        if(i<0)return 0;
        return A[i];
    }
    
    public int remain(int size){
        while(size>=K){
            int com=size/K;
            size=size%K;
            size+=com;
        }
        return size;
    } 
}
