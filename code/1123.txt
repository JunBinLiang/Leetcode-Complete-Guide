/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Set<Integer>>map=new HashMap<>();
    Set<Integer>leaves;
    boolean check=false;
    TreeNode res=null;
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        if(root==null)return null;
        dfs(root,0);
        int max=0;
        for(Integer depth:map.keySet()){
            max=Math.max(max,depth);
        }
        leaves=map.get(max);
        post(root);
        return res;
    }
    
    public void dfs(TreeNode root,int level){
        if(root==null)return;
        dfs(root.left,level+1);
        dfs(root.right,level+1);
        
        if(root.left==null&&root.right==null){
            if(!map.containsKey(level))map.put(level,new HashSet<>());
            map.get(level).add(root.val);
        }
    }
    
    public int post(TreeNode root){
        if(root==null){
            return 0;
        }
        int l=post(root.left);
        int r=post(root.right);
        int cur=0;
        if(leaves.contains(root.val))cur++;
        
        if(l+r+cur==leaves.size()&&(!check)){
            res=root;
            check=true;
        }
        return l+r+cur;
    }
}
