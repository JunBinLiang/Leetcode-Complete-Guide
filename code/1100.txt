Given a string S, return the number of substrings of length K with no repeated characters.

 

Example 1:

Input: S = "havefunonleetcode", K = 5
Output: 6
Explanation: 
There are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'.
Example 2:

Input: S = "home", K = 5
Output: 0
Explanation: 
Notice K can be larger than the length of S. In this case is not possible to find any substring.
 

Note:

1 <= S.length <= 10^4
All characters of S are lowercase English letters.
1 <= K <= 10^4







class Solution {
public:
    int t[26];
    int numKLenSubstrNoRepeats(string S, int K) {
        memset(t,0,sizeof(t));
        int res=0;
        for(int i=0;i<S.size();i++){
            t[S[i]-'a']++;
            if(i+1<K)continue;
            if(good()){
                res++;
            }
            t[S[i-K+1]-'a']--;
        }
        return res;
    }
    
    bool good(){
        for(int i=0;i<26;i++){
            if(t[i]>1)return false;
        }
        return true;
    }
};
