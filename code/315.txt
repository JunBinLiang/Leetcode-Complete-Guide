class Solution {
    public List<Integer> countSmaller(int[] A) {
        Map<Integer,Integer>f=new HashMap<>();
        int rank = 1;
        int B[]=new int[A.length];
        for(int i = 0; i < B.length;i++){
            B[i] = A[i];
        }
        Arrays.sort(B);
        for(int i : B){
            if(!f.containsKey(i)){
                f.put(i,rank);
                rank++;
            }
        }
        
        for(int i = 0; i < A.length;i++){
            A[i] = f.get(A[i]);
        }
        
        
        Seg seg = new Seg(0,A.length + 5);
        for(int i = 0; i < A.length;i++){
            int index = A[i];
            seg.update(index,1);
        }
        
        List<Integer>res = new ArrayList<>();
        for(int i = 0; i < A.length;i++){
            int index = A[i];
            int cnt = seg.query(0, index - 1);//sum
            res.add(cnt);
            seg.update(index, -1);
        }
        
        return res;
    }
    
    
    class Seg{
        int l,r;
        int sum=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.sum = left.sum + right.sum;
                
            }else{
            }
        }

        public int query(int s,int e){
            if(l==s&&r==e){
                return this.sum;
            }
            
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return left.query(s,mid) + right.query(mid+1,e);
            }
        }

        public void update(int index,int val){
            if(l==r){
                sum+=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            
            this.sum = left.sum + right.sum;
        }
    }
    
}


























class Solution {
    public List<Integer> countSmaller(int[] nums) {
        if(nums.length==0)return new ArrayList<>();
        List<Integer>list=new ArrayList<>();
        Node A[]=divide(nums,0,nums.length-1);
        int res[]=new int[nums.length];
        for(Node node:A){
            nums[node.pos]=node.cnt;
        }
        for(int i:nums)list.add(i);
        return list;
    }
    
    public Node[] divide(int A[],int l,int r){
        if(l==r){
            return new Node[]{new Node(l,A[l])};
        }
        int mid=l+(r-l)/2;
        Node ll[]=divide(A,l,mid);
        Node rr[]=divide(A,mid+1,r);
        return merge(ll,rr);
    }
    
    public Node[] merge(Node l[], Node r[]){
        Node res[]=new Node[l.length+r.length];
        int i=0,j=0,k=0;
        while(i<l.length&&j<r.length){
            if(l[i].val>r[j].val){
                l[i].cnt+=(r.length-j);
                res[k++]=l[i++];
            }else{
                res[k++]=r[j++];
            }
        }
        
        while(j<r.length){
            res[k++]=r[j++];
        }
        while(i<l.length){
            res[k++]=l[i++];
        }
        
        
        return res;
        
    }
    
    class Node{
        int cnt=0;
        int pos=-1;
        int val=0;
        public Node(int pos,int val){
            this.pos=pos;
            this.val=val;
        }
    }
}
