class Solution {
public:
    int dp[25][100][100];
    int target;
    bool good=false;
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        memset(dp,-1,sizeof(dp));
        this->target=target;
        int res=dfs(houses,cost,22,0,0);
        if(!good)return -1;
        return res;
    }
    
    int dfs(vector<int>& houses,vector<vector<int>>& cost,int prec,int i,int cnt){
        if(i>=houses.size()){
            if(cnt==target){  
                good=true;
                return 0;
            }
            return 10000000;
        }
        if(dp[prec][i][cnt]!=-1)return dp[prec][i][cnt];
        int res=INT_MAX;
        if(houses[i]==0){
            for(int j=0;j<cost[i].size();j++){
                int color=j+1;
                if(color==prec){
                    res=min(res,cost[i][j]+dfs(houses,cost,color,i+1,cnt));
                }else{
                    res=min(res,cost[i][j]+dfs(houses,cost,color,i+1,cnt+1));
                }
            }
            
        }else{
            if(houses[i]==prec){
                res=min(res,dfs(houses,cost,houses[i],i+1,cnt));
            }else{
                res=min(res,dfs(houses,cost,houses[i],i+1,cnt+1));
            }
        }
        dp[prec][i][cnt]=res;
        return res;
    }
};
