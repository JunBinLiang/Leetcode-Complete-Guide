/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> res = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(root,new ArrayList<>());
        return res;
    }
    
    public void dfs(TreeNode root,List<Integer>list){
        if(root==null)return;
        list.add(root.val);
        if(root.left==null&&root.right==null){
            StringBuilder str=new StringBuilder();
            if(list.size()==1){
                res.add(list.get(0)+"");
            }else{
                str.append(list.get(0)+"");
                for(int i=1;i<list.size();i++){
                    str.append("->");
                    str.append(list.get(i)+"");
                }
                res.add(str.toString());
            }
            list.remove(list.size()-1);
            return;
        }
        dfs(root.left,list);
        dfs(root.right,list);
        list.remove(list.size()-1);
    }
}
