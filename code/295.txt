class MedianFinder {
public:
    /** initialize your data structure here. */
    priority_queue<int>maxheap;
    priority_queue<int,vector<int>, greater<int>>minheap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxheap.size()==0){
            maxheap.push(num);
            return;
        }
        
        if(num>maxheap.top()){
            minheap.push(num);
        }
        else{
            maxheap.push(num);
        }
        
        if(maxheap.size()>minheap.size()){
            while(maxheap.size()-minheap.size()>1){
                int top=maxheap.top();maxheap.pop();
                minheap.push(top);
            }
        }
        else{
             while(minheap.size()-maxheap.size()>1){
                int top=minheap.top();minheap.pop();
                maxheap.push(top);
            }
        }
    }
    
    double findMedian() {
        if(minheap.size()==maxheap.size()){
            double sum=minheap.top()+maxheap.top();
            return sum/2;
        }
        else{
            if(minheap.size()>maxheap.size()){
                return minheap.top();
            }
            else{
                return maxheap.top();
            }
        }
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
