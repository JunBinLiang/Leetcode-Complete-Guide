class Solution {
    int mod=1000000007;
    int start,finish;
    int cost[][];
    long dp[][];
    public int countRoutes(int[] A, int start, int finish, int fuel) {
        this.start=start;
        this.finish=finish;
        cost=new int[A.length][A.length];
        dp=new long[A.length][fuel+1];
        
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        
        for(int i=0;i<A.length;i++){
            for(int j=0;j<A.length;j++){
                if(i==j)continue;
                cost[i][j]=cal(A[i],A[j]);
            }
        }
        
        return (int)(dfs(A,start,fuel));
    }
    
    public long dfs(int A[],int cur,int remain){
        if(remain<0){
            return 0;
        }
        
        if(dp[cur][remain]!=-1)return dp[cur][remain];
        
        int res=0;
        if(cur==finish){
            res++;
            
        }
        for(int i=0;i<A.length;i++){
            if(cur==i)continue;
            int use=cost[cur][i];
            res+=dfs(A,i,remain-use);
            res%=mod;
        }
        
        dp[cur][remain]=res;
        return res;
    }
    
    public int cal(int i,int j){
        return Math.abs(i-j);
    }
}
