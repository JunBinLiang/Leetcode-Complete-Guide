class Solution {
    List<Boolean>res=new ArrayList<>();
    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {
        int nums[]=new int[n+1];
        for(int i=0;i<nums.length;i++){
            nums[i]=i;
        }
        
        for(int i=1;i<=n;i++){
            int N=i;
            int R=find(nums,N);
            for(int j=1;j*j<=n;j++){
                if(N%j==0){
                    int a=N/j;
                    int b=j;
                    
                    int r1=find(nums,a);
                    int r2=find(nums,b);
                    
                    if(R!=r1&&a>threshold){
                        nums[r1]=R;
                    }
                    
                    if(R!=r2&&b>threshold){
                        nums[r2]=R;
                    } 
                }
            }
            
        }
        
        
        for(int pair[]:queries){
            int v1=pair[0],v2=pair[1];
            int r1=find(nums,v1);int r2=find(nums,v2);
            if(r1==r2)res.add(true);
            else res.add(false);
        }
        
        return res;
    }
    
    
    public int find(int nums[],int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
}
