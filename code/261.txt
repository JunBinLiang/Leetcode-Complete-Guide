Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.











class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
        if(edges.size()!=n-1)return false;
        vector<int>nums(n);
        for(int i=0;i<nums.size();i++){
            nums[i]=i;
        }
        for(vector<int>&A:edges){
            int r1=find(nums,A[0]);
            int r2=find(nums,A[1]);
            
            if(r1==r2)return false;
            nums[r1]=r2;
        }
        
        return true;
    }
    
    int find(vector<int>&nums,int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
};
