Infix to postfix

/**
 * Definition for a binary tree node.
 * class Node {
 *     char val;
 *     Node left;
 *     Node right;
 *     Node() {this.val = ' ';}
 *     Node(char val) { this.val = val; }
 *     Node(char val, Node left, Node right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public Node expTree(String s) {
        Stack<Character>stack=new Stack<>();
        Map<Character,Integer>map=new HashMap<>();
        map.put('+',0);map.put('-',0);
        map.put('*',1);map.put('/',1);
        map.put('(',-1);
        
        StringBuilder str=new StringBuilder();
        //convert infix to postfix
        
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            
            if(Character.isDigit(c)){
                str.append(c+"");
            }else{
                if(c=='('){
                    stack.push(c);
                }
                else{
                    if(c==')'){
                        while(stack.size()>0&&stack.peek()!='('){
                            str.append(stack.pop()+"");
                        }
                        stack.pop();
                    }
                    else{
                        while(stack.size()>0&&map.get(c)<=map.get(stack.peek())){
                            str.append(stack.pop()+"");
                        }
                        stack.push(c);
                    }
                }
            }
        }
        while(stack.size()>0)str.append(stack.pop()+"");
        
        return convert(str.toString());
    }
    
    
    public Node convert(String post){
        System.out.println(post);
        Stack<Node>stack=new Stack<>();
        for(int i=0;i<post.length();i++){
            char c=post.charAt(i);
            Node node=new Node(c);
            if(Character.isDigit(c)){
            
            }else{
                Node right=stack.pop();
                Node left=stack.pop();
                node.left=left;
                node.right=right;
            }
            stack.push(node);
        }
        
        while(stack.size()>1)stack.pop();
        return stack.pop();
    }
}
