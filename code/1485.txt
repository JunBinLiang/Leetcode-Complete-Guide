/**
 * Definition for Node.
 * public class Node {
 *     int val;
 *     Node left;
 *     Node right;
 *     Node random;
 *     Node() {}
 *     Node(int val) { this.val = val; }
 *     Node(int val, Node left, Node right, Node random) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *         this.random = random;
 *     }
 * }
 */

class Solution {
    Map<Node,Integer>id=new HashMap<>();
    int t=0;
    Map<Integer,NodeCopy>map=new HashMap<>();
    
    public NodeCopy copyRandomBinaryTree(Node root) {
        if(root==null)return null;
        NodeCopy R=new NodeCopy(root.val);
        dfs(R,root);
        dfs1(R,root);
        
        return R;
    }
    
    public void dfs(NodeCopy Root,Node root){
        if(root==null)return;
        
        if(root.left!=null){
            Root.left=new NodeCopy(root.left.val);
            dfs(Root.left,root.left);
        }
        
        if(root.right!=null){
            Root.right=new NodeCopy(root.right.val);
            dfs(Root.right,root.right);
        }
        
        map.put(t,Root);
        id.put(root,t);
        t++;
    }
    
    public void dfs1(NodeCopy Root,Node root){
        if(root==null)return;
        dfs1(Root.left,root.left);dfs1(Root.right,root.right);
        if(root.random!=null){
            Node ran=root.random;
            int v2=id.get(ran);
            NodeCopy point=map.get(v2);
            Root.random=point;
        }
    }
    
    
    
}
