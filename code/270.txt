Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4











/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    double MIN=1000000000000.0;
    int res=-1;
    int closestValue(TreeNode* root, double target) {
        dfs(root,target);
        return res;
    }
    
    void dfs(TreeNode* root,double t){
        if(root==NULL)return;
        if(abs(root->val+0.0-t)<MIN){
            res=root->val;
            MIN=abs(root->val-t);
            
        }
        
        if(t>=root->val){
            dfs(root->right,t);
        }
        else{
            dfs(root->left,t);
        }
    }
};
