class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int range=Integer.MAX_VALUE;
        int max=0;
        int res[]=new int[2];
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            return a[0]-b[0];
        });
        
        for(int i=0;i<nums.size();i++){
            int a=nums.get(i).get(0);
            max=Math.max(max,a);
            pq.add(new int[]{a,0,i});
        }
        range=max-pq.peek()[0];
        res[0]=pq.peek()[0];res[1]=max;
        
        while(pq.size()!=0){
            int pair[]=pq.poll();
            int v=pair[0];
            int i=pair[1];
            int r=pair[2];
            
            if(max-v<range){
                range=max-v;
                res[1]=max;
                res[0]=v;
            }
            
            if(i+1>=nums.get(r).size())break;
            
            int next=nums.get(r).get(i+1);
            max=Math.max(max,next);
            pq.add(new int[]{next,i+1,r});
            
        }
        return res;
    }
}
