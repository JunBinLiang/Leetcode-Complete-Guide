There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[1,5,3],[2,9,4]]
Output: 5
Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. 
Follow up:
Could you solve it in O(nk) runtime?








class Solution {
public:
    int minCostII(vector<vector<int>>& A) {
        if(A.size()==0)return 0;
        //no two adjacent houses have the same color.
        int res=INT_MAX;
        int sum=0;
        int n=A.size();
        int k=A[0].size();
        vector<vector<int>>dp(n,vector<int>(k));
        vector<pair<int,int>>pre;
        for(int i=0;i<k;i++){
            dp[0][i]=A[0][i];
            pre.push_back({A[0][i],i});
        }
        
        
        for(int i=1;i<A.size();i++){
            vector<pair<int,int>>newpre;
            sort(pre.begin(),pre.end(),[](const pair<int,int>&a,const pair<int,int>&b){
                return a.first<b.first;
            });
            for(int j=0;j<k;j++){
                if(j==pre[0].second){
                    dp[i][j]=A[i][j]+pre[1].first;
                }
                else{
                    dp[i][j]=A[i][j]+pre[0].first;
                }
                newpre.push_back({dp[i][j],j});
            }
            pre=newpre;
        }
        
        
        for(int i=0;i<k;i++){
            res=min(res,dp[n-1][i]);
        }
        
        
        return res;
    }
};
