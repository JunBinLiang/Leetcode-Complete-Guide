Given a list of strings dict where all the strings are of the same length.

Return True if there are 2 strings that only differ by 1 character in the same index, otherwise return False.

Follow up: Could you solve this problem in O(n*m) where n is the length of dict and m is the length of each string.

 

Example 1:

Input: dict = ["abcd","acbd", "aacd"]
Output: true
Explanation: Strings "abcd" and "aacd" differ only by one character in the index 1.
Example 2:

Input: dict = ["ab","cd","yz"]
Output: false
Example 3:

Input: dict = ["abcd","cccc","abyd","abab"]
Output: true
 

Constraints:

Number of characters in dict <= 10^5
dict[i].length == dict[j].length
dict[i] should be unique.
dict[i] contains only lowercase English letters.



class Solution {
    public boolean differByOne(String[] A) {
        int m=A[0].length();
        for(int i=0;i<m;i++){
            Set<String>set=new HashSet<>();
            for(String w:A){
                String s=w.substring(0,i)+w.substring(i+1);
                if(set.contains(s))return true;
                set.add(s);
            }
        }
        
        return false;
    }
}
