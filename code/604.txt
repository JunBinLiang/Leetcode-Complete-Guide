Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

Implement the StringIterator class:

next() Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.
hasNext() Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns false.
 

Example 1:

Input
["StringIterator", "next", "next", "next", "next", "next", "next", "hasNext", "next", "hasNext"]
[["L1e2t1C1o1d1e1"], [], [], [], [], [], [], [], [], []]
Output
[null, "L", "e", "e", "t", "C", "o", true, "d", true]

Explanation
StringIterator stringIterator = new StringIterator("L1e2t1C1o1d1e1");
stringIterator.next(); // return "L"
stringIterator.next(); // return "e"
stringIterator.next(); // return "e"
stringIterator.next(); // return "t"
stringIterator.next(); // return "C"
stringIterator.next(); // return "o"
stringIterator.hasNext(); // return True
stringIterator.next(); // return "d"
stringIterator.hasNext(); // return True
 

Constraints:

1 <= compressedString.length <= 1000
compressedString consists of lower-case an upper-case English letters and digits.
The number of a single character repetitions in compressedString is in the range [1, 10^9]
At most 100 calls will be made to next and hasNext.









class StringIterator {
    List<int[]>list=new ArrayList<>();
    int i=0,ith=0;
    public StringIterator(String s) {
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            int j=i+1;
            int cnt=0;
            while(j<s.length()&&Character.isDigit(s.charAt(j))){
                int d=s.charAt(j)-'0';
                cnt=cnt*10+d;
                j++;
            }
            i=j-1;
            list.add(new int[]{(int)(c),cnt});
        }
    }
    
    public char next() {
        if(i>=list.size())return ' ';
        int pair[]=list.get(i);
        char c=(char)(pair[0]);
        ith++;
        if(ith==pair[1]){
            ith=0;
            i++;
        }
        return c;
    }
    
    public boolean hasNext() {
        return i<list.size();
    }
}

/**
 * Your StringIterator object will be instantiated and called as such:
 * StringIterator obj = new StringIterator(compressedString);
 * char param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
