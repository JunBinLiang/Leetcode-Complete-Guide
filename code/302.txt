题意：图片在计算机处理中往往是使用二维矩阵来表示的。

假设，这里我们用的是一张黑白的图片，那么 0 代表白色像素，1 代表黑色像素。

其中黑色的像素他们相互连接，也就是说，图片中只会有一片连在一块儿的黑色像素（像素点是水平或竖直方向连接的）。

那么，给出某一个黑色像素点 (x, y) 的位置，你是否可以找出包含全部黑色像素的最小矩形（与坐标轴对齐）的面积呢？



用二分法



代码：
class Solution {
    public int minArea(char[][] image, int x, int y) {
        int l=y,r=image[0].length-1;
        int res=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            boolean check=false;
            for(int i=0;i<image.length;i++){
                if(image[i][mid]=='1'){
                    check=true;
                    break;
                }
            }
            if(check){
                res=mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
        }

        int ec=res;

        res=-1;r=y;l=0;
        while(l<=r){
            int mid=l+(r-l)/2;
            boolean check=false;
            for(int i=0;i<image.length;i++){
                if(image[i][mid]=='1'){
                    check=true;
                    break;
                }
            }
            if(check){
                res=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        int sc=res;

        res=-1;l=x;r=image.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            boolean check=false;
            for(int i=0;i<image[0].length;i++){
                if(image[mid][i]=='1'){
                    check=true;
                    break;
                }
            }
            if(check){
                res=mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        int er=res;

        res=-1;l=0;r=x;

        while(l<=r){
            int mid=l+(r-l)/2;
            boolean check=false;
            for(int i=0;i<image[0].length;i++){
                if(image[mid][i]=='1'){
                    check=true;
                    break;
                }
            }
            if(check){
                res=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        int sr=res;
        return (er-sr+1)*(ec-sc+1);
    }
}
