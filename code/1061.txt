Given strings A and B of the same length, we say A[i] and B[i] are equivalent characters. For example, if A = "abc" and B = "cde", then we have 'a' == 'c', 'b' == 'd', 'c' == 'e'.

Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'
Symmetry: 'a' == 'b' implies 'b' == 'a'
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'
For example, given the equivalency information from A and B above, S = "eed", "acd", and "aab" are equivalent strings, and "aab" is the lexicographically smallest equivalent string of S.

Return the lexicographically smallest equivalent string of S by using the equivalency information from A and B.

 

Example 1:

Input: A = "parker", B = "morris", S = "parser"
Output: "makkek"
Explanation: Based on the equivalency information in A and B, we can group their characters as [m,p], [a,o], [k,r,s], [e,i]. The characters in each group are equivalent and sorted in lexicographical order. So the answer is "makkek".
Example 2:

Input: A = "hello", B = "world", S = "hold"
Output: "hdld"
Explanation:  Based on the equivalency information in A and B, we can group their characters as [h,w], [d,e,o], [l,r]. So only the second letter 'o' in S is changed to 'd', the answer is "hdld".
Example 3:

Input: A = "leetcode", B = "programs", S = "sourcecode"
Output: "aauaaaaada"
Explanation:  We group the equivalent characters in A and B as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in S except 'u' and 'd' are transformed to 'a', the answer is "aauaaaaada".
 

Note:

String A, B and S consist of only lowercase English letters from 'a' - 'z'.
The lengths of string A, B and S are between 1 and 1000.
String A and B are of the same length.












class Solution {
public:
    string smallestEquivalentString(string A, string B, string S) {
        string res="";
        unordered_map<int,vector<char>>hash;
        vector<int>nums(26);
        for(int i=0;i<26;i++){
            nums[i]=i;
        }
        
        for(int i=0;i<A.size();i++){
            int c1=A[i]-'a';
            int c2=B[i]-'a';
            int r1=find(nums,c1);int r2=find(nums,c2);
            if(r1!=r2){
                nums[r1]=r2;
            }
        }
        
        for(int i=0;i<26;i++){
            int root=find(nums,i);
            hash[root].push_back((char)(i+'a'));
        }
        
        for(auto it=hash.begin();it!=hash.end();it++){
            vector<char>&v=it->second;
            sort(v.begin(),v.end());
        }
        
        for(char &c:S){
            int v1=c-'a';
            int r=find(nums,v1);
            res.push_back(hash[r][0]);
        }
        
        
        return res;
    }
    
    int find(vector<int>&nums,int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
};
