class Trie {

    /** Initialize your data structure here. */
    Node root=new Node();
    Set<String>set=new HashSet<>();
    public Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        set.add(word);
        insert(word,0,root.childs);
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        return set.contains(word);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        return start(prefix,0,root.childs);
    }
    
    
    public boolean start(String s,int index,Node trie[]){
        if(index>=s.length()){
            return true;
        }
        
        char c=s.charAt(index);
        if(trie[c-'a']==null){
            return false;
        }
        return start(s,index+1,trie[c-'a'].childs);
    }
    
    public void insert(String s,int index,Node trie[]){
        if(index>=s.length()){
            return;
        }
        char c=s.charAt(index);
        if(trie[c-'a']==null){
            trie[c-'a']=new Node();
        }
        insert(s,index+1,trie[c-'a'].childs);
        
    }
    
    class Node{
        Node childs[]=new Node[26];
    }
}



/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
