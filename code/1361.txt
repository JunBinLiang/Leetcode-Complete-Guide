思路：根据树的特征进行多重检查



代码：

class Solution {
    Set<Integer>set=new HashSet<>();
    List<Integer>adjecent[];
    public boolean validateBinaryTreeNodes(int n, int[] left, int[] right) {
        int e=-1;
        int cnt=0;
        int in[]=new int[n];
        adjecent=new ArrayList[n];
        for(int i=0;i<n;i++)adjecent[i]=new ArrayList<>();
        for(int i=0;i<left.length;i++){
            if(left[i]!=-1){
                in[left[i]]++;
                adjecent[i].add(left[i]);
            }
            if(right[i]!=-1){
                in[right[i]]++;
                adjecent[i].add(right[i]);
            }
        }
        
        for(int i=0;i<in.length;i++){
            if(in[i]>1)return false;
            if(in[i]==0){
                e=i;
                cnt++;
            }
        }
        
        if(cnt!=1)return false;
        dfs(e);
        if(set.size()!=n)return false;
        return true;
    }
    
    public void dfs(int root){
        List<Integer>childs=adjecent[root];
        set.add(root);
        for(int c:childs){
            dfs(c);
        }
        
    }
}
