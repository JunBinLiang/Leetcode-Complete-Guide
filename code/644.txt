Given an array consisting of n integers, find the contiguous subarray whose length is greater than or equal to k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75

Explanation:
when length is 5, maximum average value is 10.8,
when length is 6, maximum average value is 9.16667.
Thus return 12.75.

Note:
1 <= k <= n <= 10,000.
Elements of the given array will be in range [-10,000, 10,000].
The answer with the calculation error less than 10-5 will be accepted.











class Solution {
public:
    double findMaxAverage(vector<int>& A, int k) {
        double l=0.0,r=0.0;
        double res=0.0;
        for(int i:A){
            if(i<0)l+=i;
            else r+=i;
        }
        l-=1;r+=1;
        double STEP=0.000001;
        while(r-l>=STEP){
            double mid=l+(r-l)/2;
            if(check(A,mid,k)){
                res=mid;
                l=mid+STEP;
            }else{
                r=mid-STEP;
            }
        }
        return res;
    }
    
    bool check(vector<int>&A,double mid,int k){
        double sum=0;int size=0;
        vector<double>pre;
        double m=INT_MAX;
        for(int i=0;i<A.size();i++){
            double dif=A[i]-mid;
            sum+=dif;
            pre.push_back(sum);
            if(i+1<k)continue;
            if(sum>=0.0)return true;
    
            if(i-k>=0)m=min(m,pre[i-k]);
            if(m<=sum)return true;
        }
        
        return false;
    }
};
