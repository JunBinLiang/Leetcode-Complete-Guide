Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.

If there is no such window in S that covers all characters in T, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:

Input: 
S = "abcdebdde", T = "bde"
Output: "bcde"
Explanation: 
"bcde" is the answer because it occurs before "bdde" which has the same length.
"deb" is not a smaller window because the elements of T in the window must occur in order.
 

Note:

All the strings in the input will only contain lowercase letters.
The length of S will be in the range [1, 20000].
The length of T will be in the range [1, 100].



思路：
1. dp 建立table （类似lcs 的table 做法）
2. 从table 中找到关系然后反过来建回原有的string



代码：


class Solution {
    public String minWindow(String s, String t) {
       // System.out.println(s.length());
        StringBuilder str=new StringBuilder();
        int dp[][]=new int[t.length()+1][s.length()+1];

        for(int i=1;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        

        for(int i=1;i<dp.length;i++){
            char tc=t.charAt(i-1);
            for(int j=1;j<dp[0].length;j++){
                char sc=s.charAt(j-1);
                if(sc==tc){
                    if(dp[i-1][j-1]!=-1){
                        dp[i][j]=1+dp[i-1][j-1];
                    }
                }else{
                    if(dp[i][j-1]!=-1){
                        dp[i][j]=dp[i][j-1]+1;
                    }
                }
            }
        }

        int min=Integer.MAX_VALUE;
        int index=-1;
        int N=dp.length;

        for(int i=0;i<dp[0].length;i++){
            if(dp[N-1][i]==-1)continue;
            if(dp[N-1][i]<min){
                min=dp[N-1][i];
                index=i;
            }
        }
        if(index==-1)return "";        
        
        int r=N-1;
        int c=index;

        while(r>0){
            if(dp[r][c]!=min){
                r--;
            }else{
                //System.out.print(dp[r][c]+"  ");
                str.append(s.charAt(c-1));
                min--;
                if(dp[r][c]==1)break;
                c--;
            }
        }

        return str.reverse().toString();
    }
}












class Solution {
    public String minWindow(String s, String t) {
        StringBuilder str=new StringBuilder();
        int dp[][]=new int[t.length()+1][s.length()+1];
        for(int i=1;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        
        for(int i=1;i<dp.length;i++){
            char c1=t.charAt(i-1);
            for(int j=1;j<dp[0].length;j++){
                char c2=s.charAt(j-1);
                if(c1==c2){
                    if(dp[i-1][j-1]!=-1){
                        dp[i][j]=dp[i-1][j-1]+1;
                    }
                }
                else{
                    if(dp[i][j-1]!=-1){
                        dp[i][j]=1+dp[i][j-1];
                    }
                }
            }
        }
        
        
        int min=Integer.MAX_VALUE;
        int r=dp.length-1;
        int c=-1;
        
        for(int i=1;i<dp[0].length;i++){
            if(dp[r][i]==-1)continue;
            if(min>dp[r][i]){
                min=dp[r][i];
                c=i;
            }
        }
        
        if(c==-1)return "";
        
        int cur=min;
        for(int i=0;i<min;i++){
            str.append(s.charAt(c-1)+"");
            if(dp[r-1][c-1]==cur-1){
                c--;
                r--;
                cur--;
            }
            else if(dp[r][c-1]==cur-1){
                c--;
                cur--;
            }
        }
        
        
        return str.reverse().toString();
    }
}

