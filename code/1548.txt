We have n cities and m bi-directional roads where roads[i] = [ai, bi] connects city ai with city bi. Each city has a name consisting of exactly 3 upper-case English letters given in the string array names. Starting at any city x, you can reach any city y where y != x (i.e. the cities and the roads are forming an undirected connected graph).

You will be given a string array targetPath. You should find a path in the graph of the same length and with the minimum edit distance to targetPath.

You need to return the order of the nodes in the path with the minimum edit distance, The path should be of the same length of targetPath and should be valid (i.e. there should be a direct road between ans[i] and ans[i + 1]). If there are multiple answers return any one of them.

The edit distance is defined as follows:



Follow-up: If each node can be visited only once in the path, What should you change in your solution?

 

Example 1:


Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = ["ATL","PEK","LAX","DXB","HND"], targetPath = ["ATL","DXB","HND","LAX"]
Output: [0,2,4,2]
Explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.
[0,2,4,2] is equivalent to ["ATL","LAX","HND","LAX"] which has edit distance = 1 with targetPath.
[0,3,0,2] is equivalent to ["ATL","DXB","ATL","LAX"] which has edit distance = 1 with targetPath.
[0,3,1,2] is equivalent to ["ATL","DXB","PEK","LAX"] which has edit distance = 1 with targetPath.
Example 2:


Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = ["ATL","PEK","LAX","DXB"], targetPath = ["ABC","DEF","GHI","JKL","MNO","PQR","STU","VWX"]
Output: [0,1,0,1,0,1,0,1]
Explanation: Any path in this graph has edit distance = 8 with targetPath.
Example 3:



Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = ["ATL","PEK","LAX","ATL","DXB","HND"], targetPath = ["ATL","DXB","HND","DXB","ATL","LAX","PEK"]
Output: [3,4,5,4,3,2,1]
Explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.
It's equivalent to ["ATL","DXB","HND","DXB","ATL","LAX","PEK"]
 

Constraints:

2 <= n <= 100
m == roads.length
n - 1 <= m <= (n * (n - 1) / 2)
0 <= ai, bi <= n - 1
ai != bi 
The graph is guaranteed to be connected and each pair of nodes may have at most one direct road.
names.length == n
names[i].length == 3
names[i] consists of upper-case English letters.
There can be two cities with the same name.
1 <= targetPath.length <= 100
targetPath[i].length == 3
targetPath[i] consists of upper-case English letters.










class Solution {
    Map<String,Integer>map=new HashMap<>();
    List<Integer>adjecent[];
    String[] targetPath;
    int dp[][][];String[] names;
    public List<Integer> mostSimilar(int n, int[][] roads, String[] names, String[] targetPath) {
        this.names=names;
        this.targetPath=targetPath;
        adjecent=new ArrayList[n];
        for(int i=0;i<names.length;i++){
            map.put(names[i],i);
        }
        
        //construct graph
        for(int i=0;i<adjecent.length;i++){
            adjecent[i]=new ArrayList<>();
        }
        for(int pair[]:roads){
            int v1=pair[0];int v2=pair[1];
            adjecent[v1].add(v2);
            adjecent[v2].add(v1);
        }
        
        
        //init
        dp=new int[n+1][targetPath.length+1][2];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        
        
        //dfs
        List<Integer>res=new ArrayList<>();
        int mn=Integer.MAX_VALUE;
        int cur=-1;
        for(int i=0;i<n;i++){
            int v=dfs(i,0);
            if(v<mn){
                mn=v;
                cur=i;
            }
        }

        res.add(cur);
        for(int i=0;i<targetPath.length-1;i++){
            cur=dp[cur][i][1];
            res.add(cur);
        }
        
        return res;
    }
    
    public int dfs(int root,int index){
        if(index>=targetPath.length){
            return 0;
        }
        if(dp[root][index][0]!=-1)return dp[root][index][0];
        
        int res=Integer.MAX_VALUE;
        int cost=0;
        
        if(!names[root].equals(targetPath[index])){
            cost=1;
        }
        
        List<Integer>next=adjecent[root];
        for(int c:next){
            int v=dfs(c,index+1);
            
            if(v+cost<res){
                res=v+cost;
                dp[root][index][1]=c;
            }
        }
       
        
        dp[root][index][0]=res;
        return res;
    }
}








题意：
1. 给你一个图
2. 你要按targetPath 走完
3. 你可以走不一样的但是需要cost1
4. 求最短的cost的路劲

思路：
先dp填好表，然后按表反推回路劲即可




代码：


class Solution {
    List<Integer> res = new ArrayList<>();
    List<Integer>adjacent[];
    String names[];
    String[] targetPath;
    int dp[][];
    public List<Integer> mostSimilar(int n, int[][] roads, String[] names, String[] targetPath) {
        this.names=names;
        this.targetPath=targetPath;

        dp=new int[n][targetPath.length];
        adjacent=new ArrayList[n];
        for(int i=0;i<n;i++){
            adjacent[i]=new ArrayList<>();
        }

        for(int pair[]:roads){
            adjacent[pair[0]].add(pair[1]);
            adjacent[pair[1]].add(pair[0]);
        }

        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        int val=Integer.MAX_VALUE;
        int start=-1;

        for(int i=0;i<n;i++){
            int back=dfs(i,0);
            if(val>back){
                val=back;
                start=i;
            }
        }

        res.add(start);

        while(res.size()<targetPath.length){
            int last=res.get(res.size()-1);
            int index=res.size()-1;
            if(!names[last].equals(targetPath[index]))val--;
            
            for(int i=0;i<dp.length;i++){
                if(dp[i][index+1]==val&&adjacent[last].contains(i)){
                    res.add(i);
                    break;
                }
            }
        }
        return res;
    }

    public int dfs(int root,int index){
        if(index>=targetPath.length)return 0;
        if(dp[root][index]!=-1){
            return dp[root][index];
        }
        String cur=targetPath[index];
        List<Integer>childs=adjacent[root];
        int res=Integer.MAX_VALUE;
        int add=0;
        if(!names[root].equals(targetPath[index]))add=1;
        for(int child:childs){
            res=Math.min(res,add+dfs(child,index+1));
        }
        dp[root][index]=res;
        return res;
    }
}







