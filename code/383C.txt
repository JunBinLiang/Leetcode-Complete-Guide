// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*; 
// Please name your class Main
public class Main {
	
	static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    
 
    static int read() throws IOException {
        in.nextToken();
        return (int) in.nval;
    }
    static String readString() throws IOException {
        in.nextToken();
        return in.sval;
	}
	
	
	public static void main (String[] args) throws java.lang.Exception {
	    Scanner in = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		//InputReader in = new InputReader(System.in);
		
		
		
		int n=in.nextInt();
		int m=in.nextInt();
		List<Integer>adjecent[]=new ArrayList[n];
		int AA[]=new int[n];
		for(int i=0;i<n;i++){
			AA[i]=in.nextInt();
		}
		
		for(int i=0;i<adjecent.length;i++){
			adjecent[i]=new ArrayList<>();
		}
		for(int i=0;i<n-1;i++){
			int v1=in.nextInt()-1;
			int v2=in.nextInt()-1;
			adjecent[v1].add(v2);
			adjecent[v2].add(v1);
		}
		List<int[]>command=new ArrayList<>();
		for(int i=0;i<m;i++){
			int x=in.nextInt();
			if(x==1){
				int a=in.nextInt();
				int b=in.nextInt();
				command.add(new int[]{x,a,b});
			}else{
				int a=in.nextInt();
				command.add(new int[]{x,a});
			}
		}
		
		Solution sol=new Solution();
		sol.solution(AA,adjecent,command,out);
		out.flush();
		

		
	}
 
}
 
class Solution{
	//constant variable
	final int MAX=Integer.MAX_VALUE;
	final int MIN=Integer.MIN_VALUE;
	//Set<Integer>adjecent[];
	//////////////////////////////
 

	
	boolean visit[];
	int id1=0,id2=0;
	int cnt1=0,cnt2=0;
	Map<Integer,Node>map=new HashMap<>();
	List<Integer>adjecent[];
	Seg1 seg1=null;Seg1 seg2=null;
	public void solution(int A[],List<Integer>adjecent[],List<int[]>commands,PrintWriter out){
		this.adjecent=adjecent;
		int n=adjecent.length;
		visit=new boolean[n];
		
		dfs(0,true);
		
		
		int AA[]=new int[cnt1*2+100000];
		int BB[]=new int[cnt2*2+100000];
		
		seg1=new Seg1(AA);
		seg2=new Seg1(BB);
		
		
		for(Integer root:map.keySet()){
			Node node=map.get(root);
			if(node.state){
				seg1.update(node.r,node.r,A[root],0,cnt1,0);
			}else{
				seg2.update(node.rr,node.rr,A[root],0,cnt2,0);
			}
		}
		
		
		for(int pair[]:commands){
			if(pair.length==2){
				int root=pair[1]-1;
				Node node=map.get(root);
				if(node.state){
					out.println(seg1.query(node.r,0,0,cnt1,0)+"");
				}else{
					out.println(seg2.query(node.rr,0,0,cnt2,0)+"");
				}
				
			}else{
				int root=pair[1]-1;
				int val=pair[2];
				Node node=map.get(root);
				if(node.state){
					seg1.update(node.l,node.r,val,0,cnt1,0);
					seg2.update(node.ll,node.rr,-val,0,cnt2,0);
					//p();
				}else{
					seg1.update(node.l,node.r,-val,0,cnt1,0);
					seg2.update(node.ll,node.rr,val,0,cnt2,0);
					//p();
				}
				//p();
						
			}
		}
	}

	
	public void p(){
		
		
		msg(" ");
		for(Integer root:map.keySet()){
			Node node=map.get(root);
			if(node.state){
				msg("q   "+seg1.query(node.r,0,0,cnt1,0)+"   "+node.state+"   ");
			}else{
				msg("q   "+seg2.query(node.rr,0,0,cnt2,0)+"   "+node.state+"   ");
			}
		}
	}
	
	
	public void dfs(int root,boolean state){
		
		Node node=new Node(state);
		node.l=cnt1;
		node.ll=cnt2;
		
		map.put(root,node);
		visit[root]=true;
		List<Integer>childs=adjecent[root];
		for(int c:childs){
			if(visit[c])continue;
			dfs(c,!state);
		}
		

		if(state){
			node.r=cnt1;
			node.rr=cnt2-1;
			cnt1++;
		}else{
			node.rr=cnt2;
			node.r=cnt1-1;
			cnt2++;
		}
		
		
	}
	
 
 
	/*public void tarjan(int p,int r){
		if(cut)return;
		List<Integer>childs=adjecent[r];
		dis[r]=low[r]=time;
		time++;
		
		//core for tarjan
		int son=0;
		for(int c:childs){
			if(ban==c||c==p)continue;
			if(dis[c]==-1){
				son++;
				tarjan(r,c);
				low[r]=Math.min(low[r],low[c]);
				if((r==root&&son>1)||(low[c]>=dis[r]&&r!=root)){
					cut=true;
					return;
				}
			}else{
				if(c!=p){
					low[r]=Math.min(low[r],dis[c]);
				}
			}
		}
		
	}*/
	
	
 
	
	
		
	
	//helper function I would use
	public void ascii(String s){
		for(char c:s.toCharArray()){
			System.out.print((c-'a')+" ");
		}
		msg("");
	}
	
	public int flip(int i){
		if(i==0)return 1;
		else return 0;
	}
	
	public boolean[] primes(int n){
		boolean A[]=new boolean[n+1];
		for(int i=2;i<=n;i++){
			if(A[i]==false){
				for(int j=i+i;j<=n;j+=i){
					A[j]=true;
				}
			}
		}
		return A;
	}
	
	public void msg(String s){
		System.out.println(s);
	}
	
	public int[] kmpPre(String p){
		int pre[]=new int[p.length()];
		int l=0,r=1;
		while(r<p.length()){
			if(p.charAt(l)==p.charAt(r)){
				pre[r]=l+1;
				l++;r++;
			}else{
				if(l==0)r++;
				else l=pre[l-1];
			}
		}
		return pre;
	}
	
	public boolean isP(String s){
		int l=0,r=s.length()-1;
		while(l<r){
			if(s.charAt(l)!=s.charAt(r))return false;
			l++;r--;
		}
		return true;
	}
	
	public int find(int nums[],int x){//union find => find method
		if(nums[x]==x)return x;
		int root=find(nums,nums[x]);
		nums[x]=root;
		return root;
	}
	
	public boolean check(int grid[][],int r,int c){
		if(r<0||c<0||r>=grid.length||c>=grid[0].length)return false;
		return true;
	}
	
	public int get(int A[],int i){
		if(i<0||i>=A.length)return 0;
		return A[i];
	}
	public int[] copy1(int A[]){
		int a[]=new int[A.length];
		for(int i=0;i<a.length;i++)a[i]=A[i];
		return a;
	}
	
	public int[] copy2(int A[]){
		int a[]=new int[A.length];
		for(int i=0;i<a.length;i++)a[i]=A[i];
		return a;
	}
	
	
	public void print1(int A[]){
		for(long i:A)System.out.print(i+" ");
		System.out.println();
	}
	public void print2(int A[][]){
		for(int i=0;i<A.length;i++){
			for(int j=0;j<A[0].length;j++){
				System.out.print(A[i][j]+" ");
			}System.out.println();
		}
	}
	
	public int min(int a,int b){
		return Math.min(a,b);
	}
	
	
	public int[][] matrixdp(int[][] grid) {
        if(grid.length==0)return new int[][]{};
        int res[][]=new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                res[i][j]=grid[i][j]+get(res,i-1,j)+get(res,i,j-1)-get(res,i-1,j-1);
            }
        }
        return res;
    }
    
    public int get(int grid[][],int i,int j){
        if(i<0||j<0||i>=grid.length||j>=grid[0].length)return 0;
        return grid[i][j];
    }
	
	public int[] suffixArray(String s){
		int n=s.length();
		Suffix A[]=new Suffix[n];
		
		for(int i=0;i<n;i++){
			A[i]=new Suffix(i,s.charAt(i)-'a',0);
		}
		
		for(int i=0;i<n;i++){
			if(i==n-1){
				A[i].next=-1;
			}else{
				A[i].next=A[i+1].rank;
			}
		}
		Arrays.sort(A);
		
		for(int len=4;len<A.length*2;len<<=1){
			int in[]=new int[A.length];
			int rank=0;
			int pre=A[0].rank;
			A[0].rank=rank;
			in[A[0].index]=0;
			for(int i=1;i<A.length;i++){//rank for the first two letter
				if(A[i].rank==pre&&A[i].next==A[i-1].next){
					pre=A[i].rank;
					A[i].rank=rank;
				}else{
					pre=A[i].rank;
					A[i].rank=++rank;
				}
				in[A[i].index]=i;
			}
			
			for(int i=0;i<A.length;i++){
				int next=A[i].index+len/2;
				if(next>=A.length){
					A[i].next=-1;
				}else{
					A[i].next=A[in[next]].rank;
				}
			}
			
			
			Arrays.sort(A);
		}
		
		
		int su[]=new int[A.length];
		for(int i=0;i<su.length;i++){
			su[i]=A[i].index;
		}
		return su;
	}
	
}

//suffix array Struct
class Suffix implements Comparable<Suffix>{
	int index;
	int rank;
	int next;
	public Suffix(int i,int rank,int next){
		this.index=i;
		this.rank=rank;
		this.next=next;
	}
	
	@Override
	public int compareTo(Suffix other) {
		if(this.rank==other.rank){
			return this.next-other.next;
		}
		return this.rank-other.rank;
	}
	
	public String toString(){
		return this.index+"   "+this.rank+"   "+this.next+"  ";
	}
}


 
class Wrapper implements Comparable<Wrapper>{
	int spf;int cnt;
	public Wrapper(int spf,int cnt){
		this.spf=spf;
		this.cnt=cnt;
	}
		
	@Override
	public int compareTo(Wrapper other) {
		return this.spf-other.spf;
	}
}



    class Node{//what the range would be for that particular node
		boolean state=false;
        int l=0,r=0;
		int ll=0,rr=0;
        public Node(boolean state){
            this.state=state;
        }
    }
	
	
	
	class Seg1{
			int A[];
			public Seg1(int A[]){
				this.A=A;
			}
			
			public void update(int left,int right,int val,int s,int e,int id){
				if(left<0||right<0||left>right)return;
				if(left==s&&right==e){
					A[id]+=val;
					return;
				}
				int mid=s+(e-s)/2; //[s,mid] [mid+1,e]
				
				if(left>=mid+1){
					update(left,right,val,mid+1,e,id*2+2);
				}else if(right<=mid){
					update(left,right,val,s,mid,id*2+1);
				}else{
					update(left,mid,val,s,mid,id*2+1);
					update(mid+1,right,val,mid+1,e,id*2+2);
				}
			}
			
			public int query(int i,int add,int s,int e,int id){
				
				if(s==e&&i==s){
					return A[id]+add;
				}
				
				int mid=s+(e-s)/2; //[s,mid] [mid+1,e]
				
				if(i>=mid+1){
					return query(i,A[id]+add,mid+1,e,id*2+2);
				}else{
					return query(i,A[id]+add,s,mid,id*2+1);
				}
			}
	}



