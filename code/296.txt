1. brute force 每个可能的点就好了，分row 和col 因为他们是可以独立的



A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.
             
             
             
             
             
             
             
             
             
class Solution {
    public int minTotalDistance(int[][] grid) {
        List<Integer>cols=new ArrayList<>();
        List<Integer>rows=new ArrayList<>();
        for(int r=0;r<grid.length;r++){
            for(int c=0;c<grid[0].length;c++){
                if(grid[r][c]==1){
                    cols.add(c);
                    rows.add(r);
                }
            }
        }
        Collections.sort(cols);
        Collections.sort(rows);
        int rcost=Integer.MAX_VALUE;
        int ccost=Integer.MAX_VALUE;
        for(int i=0;i<grid.length;i++){
            int sum=0;
            for(int r:rows){
                sum+=Math.abs(i-r);
            }
            rcost=Math.min(rcost,sum);
        }
        for(int i=0;i<grid[0].length;i++){
            int sum=0;
            for(int c:cols){
                sum+=Math.abs(i-c);
            }
            ccost=Math.min(ccost,sum);
        }
        return rcost+ccost;
        
    }
}
