给定一个整数数组 A，返回满足下面条件的 非空、连续 子数组的数目：

子数组中，最左侧的元素不大于其他元素。


[1,4,2,5,3]

有 11 个有效子数组，分别是：[1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3] 



思路：递增栈


class Solution {
    public int validSubarrays(int[] A) {
        int res=0;
        Stack<int[]>stack=new Stack<>();

        for(int i=0;i<A.length;i++){
            while(stack.size()>0&&A[i]<stack.peek()[0]){
                res+=(i-stack.pop()[1]);
            }
            stack.push(new int[]{A[i],i});
        }

        

        if(stack.size()==1){
            res++;
        }
        else if(stack.size()>0){
            int top=stack.pop()[1];
            res++;
            while(stack.size()!=0){
                res+=top-stack.pop()[1];
                res++;
            }
        }
        

        return res;
    }
}















Given an array A of integers, return the number of non-empty continuous subarrays that satisfy the following condition:

The leftmost element of the subarray is not larger than other elements in the subarray.

 

Example 1:

Input: [1,4,2,5,3]
Output: 11
Explanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].
Example 2:

Input: [3,2,1]
Output: 3
Explanation: The 3 valid subarrays are: [3],[2],[1].
Example 3:

Input: [2,2,2]
Output: 6
Explanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].
 

Note:

1 <= A.length <= 50000
0 <= A[i] <= 100000











class Solution {
public:
    int validSubarrays(vector<int>& A) {
        int res=0;
        vector<int>sta;
        for(int i=0;i<A.size();i++){
            res++;
            while(sta.size()>0&&A[i]<sta[sta.size()-1])sta.pop_back();
            res+=sta.size();
            sta.push_back(A[i]);
        }
        return res;
    }
};
