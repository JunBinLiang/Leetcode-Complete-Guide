Given the root of a binary tree, return the number of uni-value subtrees.

A uni-value subtree means all nodes of the subtree have the same value.

 

Example 1:


Input: root = [5,1,5,5,5,null,5]
Output: 4
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [5,5,5,5,5,null,5]
Output: 6
 

Constraints:

The numbrt of the node in the tree will be in the range [0, 1000].
-1000 <= Node.val <= 1000









/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int cnt=0;
    int countUnivalSubtrees(TreeNode* root) {
        if(root==NULL)return 0;
        dfs(root);
        return cnt;
    }
    
    pair<int,bool> dfs(TreeNode* root){
        if(root->left==NULL&&root->right==NULL){
            cnt++;
            return {root->val,true};
        }
        
        if(root->left!=NULL&&root->right==NULL){
            pair<int,bool>p=dfs(root->left);
            if(p.second&&root->val==p.first){
                cnt++;
                return {root->val,true};
            }
            return {root->val,false};
        }
        
        if(root->left==NULL&&root->right!=NULL){
            pair<int,bool>p=dfs(root->right);
            if(p.second&&root->val==p.first){
                cnt++;
                return {root->val,true};
            }
            return {root->val,false};
        }
        
        pair<int,bool>p1=dfs(root->left);
        pair<int,bool>p2=dfs(root->right);
        
        if(p1.second&&p2.second&&p1.first==root->val&&p2.first==root->val){
            cnt++;
            return {root->val,true};
        }
        
        return {root->val,false};
    }
};
