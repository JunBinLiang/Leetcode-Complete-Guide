class Solution {
    int dp[][][];
    public int cherryPickup(int[][] grid) {
        int r=grid.length;
        int c=grid[0].length;
        dp=new int[r][c][r];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        return Math.max(dfs(grid,0,0,0),0);
    }
    
    public int dfs(int grid[][],int r1,int c1,int r2){
        int c2=r1+c1-r2;
        if(r1<0||c1<0||r1>=grid.length||c1>=grid[0].length||r2<0||c2<0||r2>=grid.length||c2>=grid[0].length)return -100000;
        if(grid[r1][c1]==-1||grid[r2][c2]==-1)return -100000;
        
        if(dp[r1][c1][r2]!=-1)return dp[r1][c1][r2];
        
        
        
        int res=0;
        if(r1==r2&&c1==c2){
            if(r1==grid.length-1&&c1==grid[0].length-1)return grid[r1][c1];
            res+=grid[r1][c1];
        }else{
            res+=grid[r1][c1];
            res+=grid[r2][c2];
        }
        
        //right or down only
        int val1=dfs(grid,r1+1,c1,r2);
        int val2=dfs(grid,r1,c1+1,r2);
        int val3=dfs(grid,r1+1,c1,r2+1);
        int val4=dfs(grid,r1,c1+1,r2+1);
        res=res+Math.max(val1,Math.max(val2,Math.max(val3,val4)));
        dp[r1][c1][r2]=res;
        return res;
    }
}
