class Solution {
    int res=Integer.MAX_VALUE;
    String hand;
    int n;
    public int findMinStep(String board, String hand) {
        this.hand=hand;
        int path=(1<<(hand.length()))-1;
        n=hand.length();
        res=dfs(board,0,0);
        if(res==Integer.MAX_VALUE)return -1;
        return res;
    }
    
    public int dfs(String board,int index,int cnt){
        if(board.length()==0){
            return cnt;
        }
        if(index>=hand.length()){
            return -1;
        }
        int res=Integer.MAX_VALUE;
            
        char c=hand.charAt(index);
        int val1=dfs(board,index+1,cnt);
        if(val1!=-1)res=Math.min(res,val1);
        for(int j=0;j<board.length();j++){
            String newboard=board.substring(0,j+1)+c+board.substring(j+1);
            String after=delete(newboard);
            int val=dfs(after,index+1,cnt+1);
            if(val==-1)continue;
            res=Math.min(res,val);
        }
                
        if(res==Integer.MAX_VALUE)return -1;
        return res;
    }
    
    public String delete(String s){
        Stack<int[]>stack=new Stack<>();
        StringBuilder str=new StringBuilder();
        for(int i=0;i<s.length();i++){
            int c=s.charAt(i);
            if(stack.size()==0){
                stack.push(new int[]{c,1});
            }else{
                if(c==stack.peek()[0]){
                    stack.push(new int[]{c,1+stack.peek()[1]});
                }else{
                    if(stack.peek()[1]>=3){
                        int T=stack.peek()[1];
                        for(int t=0;t<T;t++)stack.pop();
                    }
                    if(stack.size()!=0&&c==stack.peek()[0]){
                        stack.push(new int[]{c,1+stack.peek()[1]});
                    }
                    else{
                        stack.push(new int[]{c,1});
                    }
                }
            }
        }
        
        if(stack.size()!=0&&stack.peek()[1]>=3){
            int T=stack.peek()[1];
            for(int t=0;t<T;t++)stack.pop();
        }
        
        while(stack.size()!=0){
            str.append((char)(stack.pop()[0]));
        }
        return str.reverse().toString();
        
    }
    
    
}
