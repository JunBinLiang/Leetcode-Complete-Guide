    class Seg{
        int l,r;
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        int sum=0;
        int setTo=-1;
        Seg left=null,right=null;
        public Seg(int l,int r,int A[]){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid,A);
                if(r>=mid+1)right=new Seg(mid+1,r,A);
                this.min=Math.min(left.min,right.min);
                this.max=Math.max(left.max,right.max);
                this.sum=left.sum+right.sum;
            }else{
                this.min=A[l];this.max=A[l];
                this.sum=A[l];
            }
        }

        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.min=Math.min(left.min,right.min);
                this.max=Math.max(left.max,right.max);
                this.sum=left.sum+right.sum;
            }else{

            }
        }

        public long query1(int s,int e){//min
            if(e<0||s<0)return 0;

            if(l==s&&r==e){
                return min();
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(setTo!=-1){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
            }
            if(e<=mid){
                return left.query1(s,e);
            }
            else if(s>=mid+1){
                return right.query1(s,e);
            }else{
                return Math.min(left.query1(s,mid),right.query1(mid+1,e));
            }
        }

        public int query2(int s,int e){//sum
            if(e<0||s<0)return 0;


            if(l==s&&r==e){
                return this.sum();
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(setTo!=-1){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
            }
            if(e<=mid){
                return left.query2(s,e);
            }
            else if(s>=mid+1){
                return right.query2(s,e);
            }else{
                return left.query2(s,mid)+right.query2(mid+1,e);
            }
        }


        public void update(int s,int e,int val){
            if(e<0||s<0||s>e)return;
            if(l==s&&r==e){//whole subtree : setTo
                this.setTo=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(setTo!=-1){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
            }
            if(e<=mid){
                left.update(s,e,val);
            }
            else if(s>=mid+1){
                right.update(s,e,val);
            }else{
                left.update(s,mid,val);
                right.update(mid+1,e,val);
            }
            this.min=Math.min(left.min(),right.min());
            this.max=Math.max(left.max(),right.max());
            this.sum=left.sum()+right.sum();
            this.setTo=-1;
        }

        public int min() {
            if (setTo!=-1) return setTo;
            return min;
        }
        public int max() {
            if (setTo!=-1) return setTo;
            return max;
        }
        public int sum() {
            if (setTo!=-1) return (r-l+1)*(setTo);
            return sum;
        }
    }

}
