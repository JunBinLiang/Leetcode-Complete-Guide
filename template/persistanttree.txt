class PersistentSeg{
    int l,r;
    int sum = 0;
    PersistentSeg left=null,right=null;
    public PersistentSeg(int l,int r,int A[]){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new PersistentSeg(l,mid,A);
            if(r>=mid+1)right=new PersistentSeg(mid+1,r,A);
            this.sum=left.sum+right.sum;
        }else{
            this.sum=A[l];
        }
    }
    public PersistentSeg(int l,int r){
        this.l=l;
        this.r=r;
    }


    public int query(int s,int e){
        if(e<0||s<0)return 0;
        if(l==s&&r==e){
            return sum;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }else{
            return left.query(s,mid)+right.query(mid+1,e);
        }
    }

    public static void update(PersistentSeg pre,PersistentSeg cur,int index,int val){
        if(cur.l==cur.r){
            cur.sum=val;
            return;
        }
        int mid=cur.l+(cur.r-cur.l)/2;
        if(index<=mid){
            cur.right=pre.right;
            cur.left=new PersistentSeg(pre.left.l,pre.left.r);
            update(pre.left,cur.left,index,val);

        }else{
            cur.left=pre.left;
            cur.right=new PersistentSeg(pre.right.l,pre.right.r);
            update(pre.right,cur.right,index,val);
        }
        cur.sum=cur.left.sum+cur.right.sum;
    }
}
