import java.util.*;

class InversePair {
    public int[] solve(int[] A) {
        int id=0;
        Map<Integer,Integer>f=new HashMap<>();
        List<Integer>list=new ArrayList<>();

        for(int i:A){
            list.add(i);
        }

        Collections.sort(list);
        for(int i:list){
            if(!f.containsKey(i)){
                f.put(i,id++);
            }
        }

        int arr[]=new int[f.size()+10];
        FenWick fen=new FenWick(arr);


        for(int i=0;i<A.length;i++){
            A[i]=f.get(A[i]);
            fen.update(A[i],1);
        }

        
        

        for(int i=0;i<A.length;i++){
            fen.update(A[i],-1);
            if(A[i]==0)continue;
            A[i]=fen.sumRange(0,A[i]-1);
        }

        return A;
    }

    class FenWick {
        int tree[];//1-index based
        int A[];
        int arr[];
        public FenWick(int[] A) {
            this.A=A;
            arr=new int[A.length];
            tree=new int[A.length+1];
            int sum=0;
            for(int i=0;i<A.length;i++){
                update(i,A[i]);
            }
        }
        
        public void update(int i, int val) {
            arr[i]=+val;
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }
        
        public int sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }
        
        public int pre(int i){
            int sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }
    
}


