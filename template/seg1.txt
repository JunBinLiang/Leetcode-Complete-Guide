  //min
   class Seg{
        int l,r;
        int min=Integer.MAX_VALUE;
        Sol.Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{
            
            }
        }
        public int query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                min=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.min=Math.min(left.min,right.min);
        }
    }
    
    
    
    //max
    
    
        class Seg{
        int l,r;
        int max=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                if(left!=null)this.max=Math.max(max,left.max);
                if(right!=null)this.max=Math.max(max,right.max);
            }else{

            }
        }
        public int query(int s,int e){
            if(l==s&&r==e){
                return max;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.max(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                max+=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.max=Math.max(left.max,right.max);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //range update min brute force
    
        class Seg{
        int l,r;
        long min=Long.MAX_VALUE;
        Seg left=null,right=null;
        long sum=0;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid){
                    left=new Seg(l,mid);
                    this.min=Math.min(this.min,left.min);
                }
                if(r>=mid+1){
                    right=new Seg(mid+1,r);
                    this.min=Math.min(this.min,right.min);
                }
            }else{
                this.min=A[l];
            }
        }
        public long query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e)+this.sum;
            }
            else if(s>=mid+1){
                return right.query(s,e)+this.sum;
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e))+this.sum;
            }
        }

        public void update(int s,int e,int val){
            //System.out.println(s+"  "+e+"  "+this.min+"  "+this.sum);
            if(s==l&&e==r){
                this.sum+=val;
                this.min+=val;
                return;
            }

            int mid=l+(r-l)/2;
            if(e<=mid){
                left.update(s,e,val);
            }
            else if(s>=mid+1){
                right.update(s,e,val);

            }
            else{
                left.update(s,mid,val);
                right.update(mid+1,e,val);
            }
            this.min=Math.min(left.min,right.min)+this.sum;
        }
    }
    
    
    //range update min little lazy
       class Seg{
        int l,r;
        long min=Long.MAX_VALUE;
        Seg left=null,right=null;
        long sum=0;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
        }
        public long query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(left==null)left=new Seg(l,mid);
            if(right==null)right=new Seg(mid+1,r);
            if(e<=mid){
                return left.query(s,e)+this.sum;
            }
            else if(s>=mid+1){
                return right.query(s,e)+this.sum;
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e))+this.sum;
            }
        }

        public void update(int s,int e,int val,int order){
            if(s==l&&e==r){
                this.sum+=val;
                if(order==1){
                    this.min=0;this.sum=0;
                }
                this.min+=val;
                return;
            }

            int mid=l+(r-l)/2;
            if(left==null)left=new Seg(l,mid);
            if(right==null)right=new Seg(mid+1,r);

            if(e<=mid){
                left.update(s,e,val,order);
            }
            else if(s>=mid+1){
                right.update(s,e,val,order);

            }
            else{
                left.update(s,mid,val,order);
                right.update(mid+1,e,val,order);
            }
            this.min=Math.min(left.min,right.min)+this.sum;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     ／／range update min  Array
    class Seg{
        long lazymin[];
        long lazysum[];
        int range[][];

        public Seg(int n){
            lazymin=new long[n];
            lazysum=new long[n];
            range=new int[n][2];
            Arrays.fill(lazymin,Integer.MAX_VALUE);
            for(int i=0;i<range.length;i++)Arrays.fill(range[i],-1);
            construct(0,0,A.length-1);
        }

        public void construct(int id,int l,int r){
            range[id][0]=l;
            range[id][1]=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                int left=id*2+1;
                int right=id*2+2;
                if(l<=mid){
                    construct(left,l,mid);
                    lazymin[id]=Math.min(lazymin[id],lazymin[left]);
                }
                if(r>=mid+1){
                   construct(right,mid+1,r);
                   lazymin[id]=Math.min(lazymin[id],lazymin[right]);
                }
            }
            else{
                lazymin[id]=A[l];
            }
        }


        public long query(int s,int e,int id){
            if(e<0||s<0)return 0;
            int l=range[id][0],r=range[id][1];
            if(l==s&&r==e){
                return lazymin[id];
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            int left=id*2+1;
            int right=id*2+2;

            if(e<=mid){//left
                return query(s,e,id*2+1)+lazysum[id];
            }
            else if(s>=mid+1){//right
                return query(s,e,id*2+2)+lazysum[id];
            }else{
                return Math.min(query(s,mid,id*2+1),query(mid+1,e,id*2+2))+lazysum[id];
            }
        }

        public void update(int s,int e,int val,int id){
            int l=range[id][0],r=range[id][1];
            if(s==l&&e==r){
                lazysum[id]+=val;
                lazymin[id]+=val;
                return;
            }

            int mid=l+(r-l)/2;
            int left=id*2+1;
            int right=id*2+2;


            if(e<=mid){
                update(s,e,val,id*2+1);
            }
            else if(s>=mid+1){
                update(s,e,val,id*2+2);
            }
            else{
                update(s,mid,val,id*2+1);
                update(mid+1,e,val,id*2+2);
            }
            lazymin[id]=Math.min(lazymin[left],lazymin[right])+lazysum[id];
        }
    }



    /range update min  lazy array implementation
    class Seg{
        long lazymin[];
        long lazysum[];
        int range[][];

        public Seg(int n){
            lazymin=new long[n];
            lazysum=new long[n];
            range=new int[n][2];
            for(int i=0;i<range.length;i++)Arrays.fill(range[i],-1);
            range[0][0]=0;
            range[0][1]=A.length-1;
        }

        public void construct(int id,int l,int r){
            range[id][0]=l;
            range[id][1]=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                int left=id*2+1;
                int right=id*2+2;
                if(l<=mid){
                    construct(left,l,mid);
                    lazymin[id]=Math.min(lazymin[id],lazymin[left]);
                }
                if(r>=mid+1){
                   construct(right,mid+1,r);
                   lazymin[id]=Math.min(lazymin[id],lazymin[right]);
                }
            }
            else{
                lazymin[id]=A[l];
            }
        }


        public long query(int s,int e,int id){
            if(e<0||s<0)return 0;
            int l=range[id][0],r=range[id][1];
            if(l==s&&r==e){
                return lazymin[id];
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            int left=id*2+1;
            int right=id*2+2;

            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }

            if(e<=mid){//left
                return query(s,e,id*2+1)+lazysum[id];
            }
            else if(s>=mid+1){//right
                return query(s,e,id*2+2)+lazysum[id];
            }else{
                return Math.min(query(s,mid,id*2+1),query(mid+1,e,id*2+2))+lazysum[id];
            }
        }

        public void update(int s,int e,int val,int id){
            int l=range[id][0],r=range[id][1];
            if(s==l&&e==r){
                lazysum[id]+=val;
                lazymin[id]+=val;
                return;
            }

            int mid=l+(r-l)/2;
            int left=id*2+1;
            int right=id*2+2;

            //create tree
            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }


            if(e<=mid){
                update(s,e,val,id*2+1);
            }
            else if(s>=mid+1){
                update(s,e,val,id*2+2);
            }
            else{
                update(s,mid,val,id*2+1);
                update(mid+1,e,val,id*2+2);
            }
            lazymin[id]=Math.min(lazymin[left],lazymin[right])+lazysum[id];
        }
    }
    
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
