    class Seg{
        long lazymin[];
        long lazysum[];
        int range[][];

        public Seg(int n){
            lazymin=new long[n];
            lazysum=new long[n];
            range=new int[n][2];
            for(int i=0;i<range.length;i++)Arrays.fill(range[i],-1);
            range[0][0]=0;
            range[0][1]=A.length-1;
        }

        public void construct(int id,int l,int r){
            range[id][0]=l;
            range[id][1]=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                int left=id*2+1;
                int right=id*2+2;
                if(l<=mid){
                    construct(left,l,mid);
                    lazymin[id]=Math.min(lazymin[id],lazymin[left]);
                }
                if(r>=mid+1){
                   construct(right,mid+1,r);
                   lazymin[id]=Math.min(lazymin[id],lazymin[right]);
                }
            }
            else{
                lazymin[id]=A[l];
            }
        }


        public long query(int s,int e,int id){
            if(e<0||s<0)return 0;
            int l=range[id][0],r=range[id][1];
            if(l==s&&r==e){
                return lazymin[id];
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            int left=id*2+1;
            int right=id*2+2;

            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }

            if(e<=mid){//left
                return query(s,e,id*2+1)+lazysum[id];
            }
            else if(s>=mid+1){//right
                return query(s,e,id*2+2)+lazysum[id];
            }else{
                return Math.min(query(s,mid,id*2+1),query(mid+1,e,id*2+2))+lazysum[id];
            }
        }

        public void update(int s,int e,int val,int id){
            int l=range[id][0],r=range[id][1];
            if(s==l&&e==r){
                lazysum[id]+=val;
                lazymin[id]+=val;
                return;
            }

            int mid=l+(r-l)/2;
            int left=id*2+1;
            int right=id*2+2;

            //create tree
            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }


            if(e<=mid){
                update(s,e,val,id*2+1);
            }
            else if(s>=mid+1){
                update(s,e,val,id*2+2);
            }
            else{
                update(s,mid,val,id*2+1);
                update(mid+1,e,val,id*2+2);
            }
            lazymin[id]=Math.min(lazymin[left],lazymin[right])+lazysum[id];
        }
    }
