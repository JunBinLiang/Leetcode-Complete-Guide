class FFT3 {

    public static class Complex {
        double r, i;

        public Complex(double real, double imag) {
            r = real;
            i = imag;
        }

        public Complex plus(Complex b) {
            return new Complex(r + b.r, i + b.i);
        }

        public Complex minus(Complex b) {
            return new Complex(r - b.r, i - b.i);
        }

        public Complex times(Complex b) {
            return new Complex(r * b.r - i * b.i, r * b.i + i * b.r);
        }

        public Complex scalar(double s) {
            return new Complex(r * s, i * s);
        }

        public Complex conjugate() {
            return new Complex(r, -i);
        }
    }

    public static void change(Complex y[], int len){
        int i, j, k;
        for(i = 1, j = len / 2; i < len - 1; i++){
            if(i < j) {
                Complex temp = y[i];
                y[i]=y[j];
                y[j]=temp;
            }
            k = len / 2;
            while(j >= k){
                j -= k;
                k /= 2;
            }
            if(j < k) j += k;
        }
    }

    public static void fft(Complex y[], int len, int on){
        change(y, len);
        for(int h = 2; h <= len; h *= 2){
            Complex wn=new Complex(Math.cos(-on * 2*Math.PI / h), Math.sin(-on * 2*Math.PI / h));
            for(int j = 0; j < len; j += h){
                Complex w=new Complex(1, 0);
                for(int k = j; k < j + h/2; k++){
                    Complex u = y[k];
                    Complex t = w.times(y[k + h/2]);
                    y[k] = u.plus(t);
                    y[k + h/2] = u.minus(t);
                    w = w.times(wn);
                }
            }
        }
        if(on == -1)
            for(int i = 0; i < len; i++) {
                y[i].r /= len;
            }
    }

    public static List<Integer> mult(Complex[] a, Complex[] b) {
        int len1=a.length;
        int len2=b.length;
        int length = 1;
        while(length < len1 * 2 || length < len2 * 2) length *= 2;
        a = pad(a, length);
        b = pad(b, length);
        fft(a,length,1);
        fft(b,length,1);
        Complex e[]=new Complex[length];
        for (int i = 0; i < length; i++) e[i] = a[i].times(b[i]);
        fft(e,length,-1);

        int sum[]=new int[length+1];
        for(int i = 0; i < length; i++)
            sum[i] = (int)(e[i].r + 0.5);
        for(int i = 0; i < length; i++){
            sum[i+1] += sum[i] / 10;
            sum[i] %= 10;
        }

        length = len1 + len2 - 1;
        while(sum[length] <= 0 && length > 0) length--;
        List<Integer>res=new ArrayList<>();
        for(int i = 0; i <=length; i++){
            res.add(sum[i]);
        }
        return res;
    }

    public static Complex[] pad(Complex[] arr, int n) {
        Complex[] padded = new Complex[n];
        for (int i = 0; i < n; i++) padded[i] = (i < arr.length) ? arr[i] : new Complex(0, 0);
        return padded;
    }

    /*public static void main(String[] args)
    {

        FFT3.Complex[] A = new FFT3.Complex[8];
        FFT3.Complex[] B = new FFT3.Complex[4];
        A[0]=new FFT3.Complex(1,0);
        A[1]=new FFT3.Complex(0,0);
        A[2]=new FFT3.Complex(1,0);
        A[3]=new FFT3.Complex(1,0);
        A[4]=new FFT3.Complex(0,0);
        A[5]=new FFT3.Complex(0,0);
        A[6]=new FFT3.Complex(0,0);
        A[7]=new FFT3.Complex(0,0);
        B[0]=new FFT3.Complex(0,0);
        B[1]=new FFT3.Complex(0,0);
        B[2]=new FFT3.Complex(1,0);
        B[3]=new FFT3.Complex(1,0);
        mult(A,B);

    }*/

}











































class FFT {

    public static Complex[] fft(Complex[] x) {
        int n = x.length;
        if (n == 1) return new Complex[] {x[0]};
        Complex[] arr = new Complex[n / 2];
        for (int k = 0; k < n / 2; k++) arr[k] = x[2 * k];
        Complex[] q = fft(arr);
        for (int k = 0; k < n / 2; k++) arr[k] = x[2 * k + 1];
        Complex[] r = fft(arr);
        Complex[] y = new Complex[n];
        for (int k = 0; k < n / 2; k++) {
            double kth = -2 * k * Math.PI / n;
            Complex wk = new Complex(Math.cos(kth), Math.sin(kth));
            y[k] = q[k].plus(wk.times(r[k]));
            y[k + n / 2] = q[k].minus(wk.times(r[k]));
        }
        return y;
    }

    public static Complex[] mult(Complex[] a, Complex[] b) {
        int exp = 32 - Integer.numberOfLeadingZeros(a.length + b.length - 2);
        int length = (int) Math.pow(2, exp);
        a = pad(a, length);
        b = pad(b, length);
        Complex[] c = fft(a), d = fft(b), e = new Complex[length];
        for (int i = 0; i < length; i++) e[i] = c[i].times(d[i]);
        return ifft(e);
    }

    public static Complex[] pad(Complex[] arr, int n) {
        Complex[] padded = new Complex[n];
        for (int i = 0; i < n; i++) padded[i] = (i < arr.length) ? arr[i] : new Complex(0, 0);
        return padded;
    }

    public static Complex[] ifft(Complex[] x) {
        int n = x.length;
        Complex[] y = new Complex[n];
        for (int i = 0; i < n; i++) y[i] = x[i].conjugate();
        y = fft(y);
        for (int i = 0; i < n; i++) y[i] = y[i].conjugate();
        for (int i = 0; i < n; i++) y[i] = y[i].scalar(1.0 / n);
        return y;
    }

    public static class Complex {
        double r, i;

        public Complex(double real, double imag) {
            r = real;
            i = imag;
        }

        public Complex plus(Complex b) {
            return new Complex(r + b.r, i + b.i);
        }

        public Complex minus(Complex b) {
            return new Complex(r - b.r, i - b.i);
        }

        public Complex times(Complex b) {
            return new Complex(r * b.r - i * b.i, r * b.i + i * b.r);
        }

        public Complex scalar(double s) {
            return new Complex(r * s, i * s);
        }

        public Complex conjugate() {
            return new Complex(r, -i);
        }
    }

    public static void main (String[] args) throws java.lang.Exception {
        //usage
        FFT.Complex A[]=new FFT.Complex[4];
        FFT.Complex B[]=new FFT.Complex[5];

        A[0]=new FFT.Complex(1,0);
        A[1]=new FFT.Complex(5,0);
        A[2]=new FFT.Complex(3,0);
        A[3]=new FFT.Complex(2,0);

        B[0]=new FFT.Complex(0,0);
        B[1]=new FFT.Complex(0,0);
        B[2]=new FFT.Complex(6,0);
        B[3]=new FFT.Complex(2,0);
        B[4]=new FFT.Complex(5,0);

        FFT.Complex C[]=FFT.mult(A,B);
        for(FFT.Complex c:C){
            System.out.println(c.r);
        }
        
    }
}








class FFT1 {

    // p is a prime number set to be larger than 2^31-1
    private static long p = 4300210177L;

    // q is 2^64 mod p used to compute x*y mod p
    // Note: If x*y mod p is negative it is because 2^64
    // has been subtracted and so it must be added again.
    private static long q = 857728777;

    // A number that has order 2^20 modulo p
    private static long zeta = 3273;

    private static int exp = 20;
    private static long[] powers;

    static {
        powers = new long[(1 << exp) + 1];
        powers[0] = 1;
        for (int i = 1; i < powers.length; i++) powers[i] = mult(zeta, powers[i - 1]);
    }

    // Computes the polynomial product modulo p
    public static long[] multiply(long[] x, long[] y) {

        // If the coefficients are negative place them in the range of [0, p)
        for (int i = 0; i < x.length; i++) if (x[i] < 0) x[i] += p;
        for (int i = 0; i < y.length; i++) if (y[i] < 0) y[i] += p;

        int zLength = x.length + y.length - 1;
        int logN = 32 - Integer.numberOfLeadingZeros(zLength - 1);
        long[] xx = transform(x, logN, false);
        long[] yy = transform(y, logN, false);
        long[] zz = new long[1 << logN];
        for (int i = 0; i < zz.length; i++) zz[i] = mult(xx[i], yy[i]);
        long[] nZ = transform(zz, logN, true);
        long[] z = new long[zLength];
        long nInverse = p - ((p - 1) >>> logN);
        for (int i = 0; i < z.length; i++) {
            z[i] = mult(nInverse, nZ[i]);
            if (z[i] >= Integer.MAX_VALUE) z[i] -= p;
        }
        return z;
    }

    private static long mult(long x, long y) {
        long z = x * y;
        if (z < 0) {
            z = z % p + q;
            return z < 0 ? z + p : z;
        }
        if (z < (1L << 56) && x > (1 << 28) && y > (1 << 28)) {
            z = z % p + q;
            return z < p ? z : z - p;
        }
        return z % p;
    }

    private static long[] transform(long[] v, int logN, boolean inverse) {
        int n = 1 << logN;
        long[] w = new long[n];
        for (int i = 0; i < v.length; i++) w[Integer.reverse(i) >>> 32 - logN] = v[i];
        for (int i = 0; i < logN; i++) {
            int jMax = 1 << i;
            int kStep = 2 << i;
            int index = 0;
            int step = 1 << exp - i - 1;
            if (inverse) {
                index = 1 << exp;
                step = -step;
            }
            for (int j = 0; j < jMax; j++) {
                long zeta = powers[index];
                index += step;
                for (int k = j; k < n; k += kStep) {
                    int kk = jMax | k;
                    long x = w[k];
                    long y = mult(zeta, w[kk]);
                    long z = x + y;
                    w[k] = z < p ? z : z - p;
                    z = x - y;
                    w[kk] = z < 0 ? z + p : z;
                }
            }
        }
        return w;
    }

}
