//输⼊ [3,4,5,1] 输出 3*4*(5+1)=72
//输⼊ [1,1,1,5] 输出 (1+1+1)*5=15
//find maximum expression 



// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=0;
        int A[]=new int[]{3,4,5,1};
        int B[]=new int[]{1,1,1,5};
        Solution sol=new Solution(out);
        sol.solution(A);

        for(int t=0;t<T;t++){
            //Solution sol=new Solution(out);
            //sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }

    int dp[][];
    int opt[][][];
    public void solution(int A[]){
        int n=A.length;
        dp=new int[n+1][n+1];
        opt=new int[n+1][n+1][2];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        int res=dfs(A,0,A.length-1);
        out.println(res);

        String s=construct(A,0,A.length-1);
        out.println(s);
    }

    public String construct(int A[],int l,int r){
        if(l==r){
            return A[l]+"";
        }
        int cut=opt[l][r][0];
        String left="("+construct(A,l,cut)+")";
        String right="("+construct(A,cut+1,r)+")";
        if(opt[l][r][1]==0)return left+"+"+right;
        else return left+"*"+right;
    }

    public int dfs(int A[],int l,int r){
        if(l==r){
            return A[l];
        }
        if(dp[l][r]!=-1)return dp[l][r];
        int res=Integer.MIN_VALUE;
        for(int i=l;i<r;i++){
            int left=dfs(A,l,i);
            int right=dfs(A,i+1,r);
            int a=left+right;
            int b=left*right;
            if(a>res){
                res=a;
                opt[l][r][0]=i;
                opt[l][r][1]=0;//0:addition
            }
            if(b>res){
                res=b;
                opt[l][r][0]=i;
                opt[l][r][1]=1;//1:multiplication
            }
        }
        dp[l][r]=res;
        return res;
    }
}











/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/



















Solution 2












// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=0;
        int A[]=new int[]{3,4,5,1};
        int B[]=new int[]{1,1,1,5};
        int C[]=new int[]{-5,-3,-8};
        Solution sol=new Solution(out);
        sol.solution(C);

        for(int t=0;t<T;t++){
            //Solution sol=new Solution(out);
            //sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }

    int dp[][][];
    int opt[][][];
    public void solution(int A[]){
        int n=A.length;
        dp=new int[n+1][n+1][2];
        opt=new int[n+1][n+1][8];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        int res[]=dfs(A,0,A.length-1);
        System.out.println(res[0]);


        int cut=opt[0][A.length-1][0];
        int op=opt[0][A.length-1][1];

        String s="";
        if(op==0)s="("+construct(A,0,cut,opt[0][A.length-1][2])+")"+"+"+"("+construct(A,cut+1,A.length-1,opt[0][A.length-1][3])+")";
        if(op==1)s="("+construct(A,0,cut,opt[0][A.length-1][2])+")"+"*"+"("+construct(A,cut+1,A.length-1,opt[0][A.length-1][3])+")";
        if(op==2)s="("+construct(A,0,cut,opt[0][A.length-1][2])+")"+"-"+"("+construct(A,cut+1,A.length-1,opt[0][A.length-1][3])+")";
        System.out.println(s);
    }

    public String construct(int A[],int l,int r,int val){
        if(l==r){
            return A[l]+"";
        }
        int mxcut=opt[l][r][0];
        int mncut=opt[l][r][4];

        int op1=opt[l][r][1];
        int op2=opt[l][r][5];
        int sum1=0,sum2=0;

        if(op1==0){
            sum1=opt[l][r][2]+opt[l][r][3];
        }
        if(op1==1){
            sum1=opt[l][r][2]*opt[l][r][3];
        }
        if(op1==2){
            sum1=opt[l][r][2]-opt[l][r][3];
        }


        if(op2==0){
            sum2=opt[l][r][6]+opt[l][r][7];
        }
        if(op2==1){
            sum2=opt[l][r][6]*opt[l][r][7];
        }
        if(op2==2){
            sum2=opt[l][r][6]-opt[l][r][7];
        }

        if(sum1==val){
            if(op1==0){
                return "("+construct(A,l,mxcut,opt[l][r][2])+")"+"+"+"("+construct(A,mxcut+1,r,opt[l][r][3])+")";
            }
            else if(op1==1){
                return "("+construct(A,l,mxcut,opt[l][r][2])+")"+"*"+"("+construct(A,mxcut+1,r,opt[l][r][3])+")";
            }
            else {
                return "("+construct(A,l,mxcut,opt[l][r][2])+")"+"-"+"("+construct(A,mxcut+1,r,opt[l][r][3])+")";
            }
        }
        else{
            if(op2==0){
                return "("+construct(A,l,mncut,opt[l][r][6])+")"+"+"+"("+construct(A,mncut+1,r,opt[l][r][7])+")";
            }
            else if(op2==1){
                return "("+construct(A,l,mncut,opt[l][r][6])+")"+"*"+"("+construct(A,mncut+1,r,opt[l][r][7])+")";
            }
            else {
                return "("+construct(A,l,mncut,opt[l][r][6])+")"+"-"+"("+construct(A,mncut+1,r,opt[l][r][7])+")";
            }
        }
    }

    public int[] dfs(int A[],int l,int r){
        if(l==r){
            return new int[]{A[l],A[r]};
        }
        if(dp[l][r][0]!=-1)return dp[l][r];
        int mn=Integer.MAX_VALUE;
        int mx=Integer.MIN_VALUE;
        for(int i=l;i<r;i++){
            int left[]=dfs(A,l,i);
            int right[]=dfs(A,i+1,r);

            for(int x:left){
                for(int y:right){//0:+ 1:* 2:-
                    int a=x+y;
                    int b=x*y;
                    int c=x-y;
                    if(a>mx){
                        mx=a;
                        opt[l][r][0]=i;
                        opt[l][r][1]=0;
                        opt[l][2][2]=x;
                        opt[l][3][3]=y;
                    }
                    if(b>mx){
                        mx=b;
                        opt[l][r][0]=i;
                        opt[l][r][1]=1;
                        opt[l][2][2]=x;
                        opt[l][3][3]=y;
                    }
                    if(c>mx){
                        mx=c;
                        opt[l][r][0]=i;
                        opt[l][r][1]=2;
                        opt[l][2][2]=x;
                        opt[l][3][3]=y;
                    }


                    if(a<mn){
                        mn=a;
                        opt[l][r][4]=i;
                        opt[l][r][5]=0;
                        opt[l][2][6]=x;
                        opt[l][3][7]=y;
                    }
                    if(b<mn){
                        mn=b;
                        opt[l][r][4]=i;
                        opt[l][r][5]=1;
                        opt[l][2][6]=x;
                        opt[l][3][7]=y;
                    }
                    if(c<mn){
                        mn=c;
                        opt[l][r][4]=i;
                        opt[l][r][5]=2;
                        opt[l][2][6]=x;
                        opt[l][3][7]=y;
                    }
                }
            }
        }
        dp[l][r][0]=mx;
        dp[l][r][1]=mn;
        return dp[l][r];
    }
}











/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/




